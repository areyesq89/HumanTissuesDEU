#+TITLE: Calculation and analysis of REUCs
#+PROPERTY: session *R REUC*
#+PROPERTY: results output
#+PROPERTY: exports both

* Prepare objects

** DEXSeqDataSet object 

#+BEGIN_SRC R

  library(GenomicFeatures)

  path <- Sys.getenv("gtex")

  df <- read.table(file.path(path, "annotation", "gtf", "chrNameLength.txt"), header=FALSE)
  colnames(df) <- c("chrom", "length")
  df$is_circular <- df$chrom %in% "MT"

  transcriptDb <- makeTxDbFromGFF(
      file = file.path(path, "annotation", "gtf", "Homo_sapiens.GRCh38.84.notretained.gtf"),
      chrominfo = df,
      dataSource="ftp://ftp.ensembl.org/pub/release-84/gtf/homo_sapiens/Homo_sapiens.GRCh38.84.gtf.gz",
      organism="Homo sapiens")

  saveDb(transcriptDb, file=file.path(path, "objects", "GRCh38.sqlite") )

  library(biomaRt)
  ensemblMart <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", version=84)

  transcriptInfo <- getBM( c("transcript_appris", "transcript_biotype", "ensembl_transcript_id"), mart=ensemblMart )
  rownames( transcriptInfo ) <- transcriptInfo$ensembl_transcript_id
  save( transcriptInfo, file=file.path( path, "objects", "transcriptInfo.RData" ) )

  geneInfo <- getBM(c("ensembl_gene_id", "gene_biotype", "external_gene_name"),
               mart=ensemblMart )
  rownames(geneInfo) <- geneInfo$ensembl_gene_id
  save( geneInfo, file=file.path( path, "objects", "geneInfo.RData" ))

#+END_SRC

#+BEGIN_SRC R

  path <- Sys.getenv("gtex")
  countFiles <- list.files( file.path(path, "counts"), pattern="exonCounts.txt", full.names=TRUE)
  names(countFiles) <- sapply(strsplit( basename(countFiles), "_" ), "[[", 1)
  sampleFile <-
       read.delim(file.path( path, "objects", "SraRunTable.txt"), header=TRUE)
  load( file.path( path, "objects", "samplesToUse.RData"))
  sampleFile <- filter( sampleFile, Run_s %in% samplesToUse )
  sampleFile$countFile <- countFiles[as.character(sampleFile$Run_s)]
  annotationDf <-
       dplyr::select( sampleFile, body_site_s, sex_s, submitted_subject_id_s )
  rownames( annotationDf ) <- sampleFile$Run_s

  colnames(annotationDf) <- c("tissue", "sex", "individual")

  dxd1 <-
      DEXSeqDataSetFromHTSeq(
          countFiles[samplePerObject[[1]]],
          annotationDf[samplePerObject[[1]],],
          design= ~ sample+exon+tissue:exon,
          file.path(path, "objects",
                "Homo_sapiens.GRCh38.84.notretained.DEXSeq.gtf") ) 

  dxd2 <-
      DEXSeqDataSetFromHTSeq(
          countFiles[samplePerObject[[2]]],
          annotationDf[samplePerObject[[2]],],
          design= ~ sample+exon+tissue:exon,
          file.path(path, "objects",
                    "Homo_sapiens.GRCh38.84.notretained.DEXSeq.gtf") )

  dxd3 <-
      DEXSeqDataSetFromHTSeq(
          countFiles[samplePerObject[[3]]],
          annotationDf[samplePerObject[[3]],],
          design= ~ sample+exon+tissue:exon,
          file.path(path, "objects",
                    "Homo_sapiens.GRCh38.84.notretained.DEXSeq.gtf") )

  dxd1 <- estimateSizeFactors(dxd1)
  dxd2 <- estimateSizeFactors(dxd2)
  dxd3 <- estimateSizeFactors(dxd3)

  colData(dxd1) <- droplevels(colData(dxd1))
  colData(dxd2) <- droplevels(colData(dxd2))
  colData(dxd3) <- droplevels(colData(dxd3))

  save( dxd1, dxd2, dxd3,
       file=file.path(path, "objects", "dxdObjects.RData"))


#+END_SRC

Define exons to test based on mean counts

#+BEGIN_SRC R

  library(DEXSeq)
  path <- Sys.getenv("gtex")
  load(file.path(path, "objects", "dxdObjects.RData"))

  means <- sapply(list(dxd1, dxd2, dxd3), function(x){
      mnCounts <- rowMeans(featureCounts(x, normalized=TRUE))
      mnCounts
  })  

  allMeans <- rowMeans((means))
  #testableVector <- allMeans > 5

  testableVector <- rep(TRUE, nrow(dxd1))
  names( testableVector ) <- rownames(dxd1)
  save( testableVector, file=file.path(path, "objects", "testableVector.RData") )

  save( testableVector, file=file.path( path, "objects", "testableVector.RData") )

#+END_SRC


** Alternative exon counts

#+BEGIN_SRC R

  library(DEXSeq)

  path <- Sys.getenv("gtex")

  load( file.path( path, "objects", "samplesToUse.RData") )
  load( file.path( path, "objects", "dxdObjects.RData") )


  genomicData <- rowRanges(dxd1)
  mcols(genomicData) <- NULL
  rm(dxd1, dxd2, dxd3)

  alternativeCounts <- sapply( samplesToUse, function(i){
      w <- which(samplesToUse %in% i)
      cat(sprintf("processing %s sample %s\n", w, i))
      file <- file.path( path, "alignments", i, sprintf("%s_SJ.out.tab", i) )
      coords <- read.delim( file, header=FALSE )
      gCoords <- GRanges(as.character(coords$V1), IRanges( coords$V2, coords$V3 ) )
      over <- suppressWarnings( findOverlaps(genomicData, gCoords, type="within") )
      altCounts <- tapply( coords$V7[subjectHits(over)],
                      names(genomicData)[queryHits(over)],
                      sum )
      counts <- rep( 0, length.out=length(genomicData) )
      names(counts) <- names(genomicData)
      counts[names(altCounts)] <- altCounts
      counts
  })

  save( alternativeCounts, file=file.path( path, "objects", "altCountsMatrix.RData" ) )

  load( file.path( path, "objects", "dxdObjects.RData") )

  library(pryr)


  sampleData <- sampleAnnotation(dxd1)
  sampleData <- as.data.frame(sampleData)
  dxd1JR <-
      DEXSeqDataSet(
          countData=featureCounts(dxd1),
          alternativeCountData=alternativeCounts[,as.character(sampleData$sample)],
          featureRanges=genomicData,
          transcripts=rowRanges(dxd1)$transcripts,
          sampleData=sampleData,
          groupID=geneIDs(dxd1),
          featureID=exonIDs(dxd1),
          design=design(dxd1))

  sampleData <- sampleAnnotation(dxd2)
  sampleData <- as.data.frame(sampleData)
  dxd2JR <-
      DEXSeqDataSet(
          countData=featureCounts(dxd2),
          alternativeCountData=alternativeCounts[,as.character(sampleData$sample)],
          featureRanges=genomicData,
          transcripts=rowRanges(dxd2)$transcripts,
          sampleData=sampleData,
          groupID=geneIDs(dxd2),
          featureID=exonIDs(dxd2),
          design=design(dxd2))

  sampleData <- sampleAnnotation(dxd3)
  sampleData <- as.data.frame(sampleData)
  dxd3JR <-
      DEXSeqDataSet(
          countData=featureCounts(dxd3),
          alternativeCountData=alternativeCounts[,as.character(sampleData$sample)],
          featureRanges=genomicData,
          transcripts=rowRanges(dxd3)$transcripts,
          sampleData=sampleData,
          groupID=geneIDs(dxd3),
          featureID=exonIDs(dxd3),
          design=design(dxd3))

  save(dxd1JR, dxd2JR, dxd3JR, file=file.path(path, "objects", "dxdJRObjects.RData") )

  load(file.path( path, "objects", "dxdJRObjects.RData" ) )

  dxd1JR <- estimateSizeFactors( dxd1JR )
  dxd2JR <- estimateSizeFactors( dxd2JR )
  dxd3JR <- estimateSizeFactors( dxd3JR )

  defineTestable <- function(dxd){
      norCounts <- counts(dxd, normalized=TRUE)
      isThis <- colData(dxd)$exon == "this"
      meanThis <- rowMeans(norCounts[,isThis])
      meanOthers <- rowMeans(norCounts[,!isThis])
      mcols(dxd)$testable <- meanOthers > 0 & meanThis > 10
      dxd
  }

  dxd1JR <- defineTestable(dxd1JR)
  dxd2JR <- defineTestable(dxd2JR)
  dxd3JR <- defineTestable(dxd3JR)

  save(dxd1JR, dxd2JR, dxd3JR, file=file.path(path, "objects", "dxdJRObjects.RData") )

#+END_SRC


* Shrinkage and dispersion fits

** Functions

#+BEGIN_SRC R :tangle reucFunctions.R

profileLogLikelihood <- function( disp, mm, y, muhat )
{
   # calculate the log likelihood:
   if(length(disp) != length(y)){
      disp <- rep(disp, length(y))
   }

   ll <- sum( sapply( seq(along=y), function(i)
      dnbinom( y[i], mu=muhat[i], size=1/disp[i], log=TRUE ) ) )

   # transform the residuals, i.e., y - muhat, to the linear
   # predictor scale by multiplying them with the derivative
   # of the link function, i.e., by 1/muhat, and add this to the
   # linear predictors, log(muhat), to get the predictors that
   # are used in the IWLS regression
   z <- log(muhat) + ( y - muhat ) / muhat

   # the variance function of the NB is as follows
   v0 <- muhat + disp * muhat^2

   # transform the variance vector to linear predictor scale by
   # multiplying with the squared derivative of the link to
   # get the (reciprocal) weights for the IWLS
   w <- 1 / ( ( 1 / muhat )^2 * v0 )

   # All we need from the IRLS run is the QR decomposition of
   # its matrix
   qrres <- qr( mm*sqrt(w) )

   # from it, we extract we leverages and calculate the Cox-Reid
   # term:
   cr <- sum( log( abs( diag( qrres$qr )[ seq_len(qrres$rank) ] ) ) )

   # return the profile log likelihood:
   ll - cr
}


estimateOneDispersionTRT <- function( modelMatrix, countVector,
      sizeFactors, dispInitialGuess = .5 ) {

   fit1 <- statmod::glmnb.fit( modelMatrix, countVector,
                      dispersion=dispInitialGuess, offset=log(sizeFactors) )

   exp( optimize(
      function( logalpha )
         -profileLogLikelihood(
            exp(logalpha),
            modelMatrix,
            countVector,
            fitted.values(fit1) ),
      log( c( 1e-5, 1e3 ) ) )$minimum )
}

  getIndexList <- function(dxd){
      modelFrame <- as.data.frame(colData(dxd))
      sampleIdx <- data.frame( sample = levels(modelFrame$sample), 
          col = seq_along( levels(modelFrame$sample) ) )
      exonAvgIdx <- max(sampleIdx$col) + 1
          sexIdx <- exonAvgIdx + 1
        crossIdx <- expand.grid( tissue=levels(modelFrame$tissue), individual=levels(modelFrame$individual) )
        crossIdx$col = sexIdx + 1:nrow(crossIdx)
        list( sampleIdx=sampleIdx, exonAvgIdx=exonAvgIdx,
             sexIdx=sexIdx, crossIdx=crossIdx )
  }

  modelMatrixREUC <- function(dxd, indexList){
      modelFrame <- as.data.frame( colData(dxd) )
      mm <- matrix( 0, nrow = nrow(modelFrame),
                   ncol = max(indexList[["crossIdx"]]$col) )
      colnames(mm) <- rep( NA, ncol(mm) )
      colnames(mm)[indexList[["sampleIdx"]]$col] <-
          paste( "sample", indexList[["sampleIdx"]]$sample, sep="_")
                colnames(mm)[indexList[["exonAvgIdx"]]] <- "exonAvg"
      colnames(mm)[indexList[["sexIdx"]]] <- "sex"
      colnames(mm)[indexList[["crossIdx"]]$col] <- sprintf( "tissue_%s:individual_%s", indexList[["crossIdx"]]$tissue, indexList[["crossIdx"]]$individual )
      for( i in 1:nrow(modelFrame) ) {
          mm[ i, indexList[["sampleIdx"]]$col[ indexList[["sampleIdx"]]$sample == modelFrame$sample[i] ] ] <- 1
          mm[ i, indexList[["exonAvgIdx"]] ] <- { if( modelFrame$exon[i] == "this" ) 1 else 0 }
          mm[ i, indexList[["sexIdx"]] ] <- { if( modelFrame$sex[i] == "male" && modelFrame$exon[i] == "this" ) .5 else -.5 }  
          mm[ i, indexList[["crossIdx"]]$col[ indexList[["crossIdx"]]$tissue == modelFrame$tissue[i] & indexList[["crossIdx"]]$individual == modelFrame$individual[i] ] ] <- { if( modelFrame$exon[i] == "this" ) .5 else -.5 }
      }
      mm
  }

  ll <- function( muhat, y, disp )
     sum( y * log( muhat ) - ( y + 1/disp ) * log( muhat + 1/disp ) )

  dll <- function( muhat, y, disp )
      y / muhat - ( y + 1/disp ) / ( muhat + 1/disp )

  shrinkageFit <- function( mm, counts, dispersions, sizeFactors,
                           beta0, shrink, priorsd ) {
     ofit <- optim(
       beta0,
       function(beta) { 
          muhat <- exp( mm %*% beta ) * sizeFactors
          -ll( muhat, counts, dispersions ) +
              sum( beta[shrink]^2 ) / priorsd^2 / 2 } ,
       function(beta) { 
          muhat <- exp( mm %*% beta ) * sizeFactors
          -t( dll( muhat, counts, dispersions ) * muhat ) %*% mm +
              beta*shrink / priorsd^2 }, method="L-BFGS-B",
       control = list( trace=0, maxit=5000, factr=1e5 ) )      
     if( ofit$convergence != 0 )
        warning( "L-BFGS optimization did not converge." )
     ofit$par
  }

  llCR <- function( muhat, y, disp, mm ) {
      ll <- sum( sapply( seq(along=y), function(i)
          dnbinom( y[i], mu=muhat[i], size=1/disp[i], log=TRUE ) ) )
          z <- log(muhat) + ( y - muhat ) / muhat
          v0 <- muhat + disp * muhat^2
          w <- 1 / ( ( 1 / muhat )^2 * v0 )
          qrres <- qr( mm*sqrt(w) )
          cr <- sum( log( abs( diag( qrres$qr )[ seq_len(qrres$rank) ] ) ) )
          ll - cr
  }

  estimateDispForExon <- function( muhat, y, mm, isThis,
                                        startDispThis=.1, startDispOthers=.1 ) {
      a <- optim( log( c( startDispThis, startDispOthers ) ),
                 function( x ) {
                     disps <- ifelse( isThis, exp(x[1]), exp(x[2]) )
                     -llCR( muhat, y, disps, mm ) } )
      names(a$par) <- c( "dispThis", "dispOthers" )
      exp(a$par)
  }

#+END_SRC 

** Higher level functions

#+BEGIN_SRC R :tangle highLevelFunctions.R

    fitAllExons <- function( countMatrix, modelFrame, mm, shrink, priorsd, testableVector, dispThis,
                            dispOthers, verbose=FALSE) {
        cat("preparing objects\n")
        sf <- modelFrame$sizeFactor
        rows <- rownames(countMatrix)
        cat("start fitting\n")
        allCoefs <- lapply( rows, 
          function(i, countMatrix, mm, modelFrame, shrink, sf, dispThis, dispOthers, testableVector, priorsd ) {
             x <- names( testableVector ) %in% i
             y <- rownames( countMatrix ) %in% i
             if( verbose )
                cat( sprintf( "fitting %s\n", i) )
             if( which(x) %% 1000 == 0 )
                cat( sprintf( "fitting %s\n", i ) )
             if( testableVector[x] ) {
                cnts <- as.vector( countMatrix[y,] )
                disps <- pmax( 3e-3,
                   ifelse( modelFrame$exon=="this", dispThis[x], dispOthers[x] ) )
                beta0 <- rep( 2, ncol(mm) )
                ans <- try( shrinkageFit( mm, cnts, disps, sf, beta0, shrink, priorsd ) )
                if( !inherits( ans, "try-error" ) ){
                   ans
                }else{
                  rep( NA, ncol(mm) )
                }
             }else{
                rep( NA, ncol(mm) )
             }
            },
            countMatrix=countMatrix,
            mm=mm,
            modelFrame=modelFrame,
            shrink=shrink,
            sf=sf,
            dispThis=dispThis,
            dispOthers=dispOthers,
            testableVector=testableVector,
            priorsd=priorsd)
       allCoefs <- do.call( rbind, allCoefs )
       rownames(allCoefs) <- rownames(countMatrix)
       colnames(allCoefs) <- colnames(mm)
       allCoefs
    }

    fitAllExonsParallel <- function(dxd, dispThis, dispOthers, priorsd, bjp){
        indexes1 <- getIndexList( dxd )
        mm <- modelMatrixREUC( dxd, indexes1 )  
        shrink <- 1:ncol(mm) %in% c( indexes1[["sexIdx"]], indexes1[["crossIdx"]]$col )  
        modelFrame <- colData(dxd)
        sizeFactors <- modelFrame$sizeFactor
        beta0 <- rep(2, ncol(mm))
        modelFrame <- colData(dxd)
        countMatrix <- counts(dxd)
        n <- bpnworkers(bjp)
        toSplit <- sort(rep(1:n, length.out=length(rownames(countMatrix))))
        matList <- lapply( split( rownames(countMatrix), toSplit ), function(x){
            countMatrix[x,]
        })
        cat(sprintf("estimating coefs with %s cores\n", n))
        allCoefsWeakShrinkage <-
            bplapply( matList,
                function(x, modelFrame, mm, shrink, priorsd,
                          testableVector, dispThis, dispOthers, verbose){
                    path <- Sys.getenv("gtex")
                    source( file.path(path, "org", "reucFunctions.R") )
                    source( file.path(path, "org", "highLevelFunctions.R" ) )
                    fitAllExons( x, modelFrame, mm, shrink, priorsd,
                                testableVector, dispThis, dispOthers, verbose )
                 }, modelFrame=modelFrame, mm=mm, shrink=shrink, priorsd=priorsd,
                 testableVector=testableVector, dispThis=dispThis, dispOthers=dispOthers,
                 verbose=TRUE,
                 BPPARAM=bjp )
        do.call(rbind, allCoefsWeakShrinkage)
    }

  estimateDispersionsForMat <- function( countMatrix, coefsMat, testableVector,
                                        mm, sizeFactors, isThis){
      dispDf <- lapply( rownames(countMatrix), function(i){
          cat(sprintf("fitting %s\n", i))
          x <- rownames(countMatrix) %in% i
          xi <- rownames(coefsMat) %in% i
          stopifnot(all(rownames(coefsMat) == names(testableVector)))
          if( !testableVector[xi] ){
              return(c( NA, NA ) )
          }
          muhat <- as.vector(exp( mm %*% coefsMat[xi,] ) * sizeFactors)
          y <- as.vector(countMatrix[x,])
          disps <- try( estimateDispForExon( muhat, y, mm, isThis ), silent=TRUE )
          if( !inherits( disps, "try-error" ) ){
              disps
          }else{
              c( NA, NA )
          }
      })
      dispDf <- do.call(rbind, dispDf)
      rownames(dispDf) <- rownames(countMatrix)
      dispDf
  }

  estimateDispersionsParallel <- function(dxd, coefsMat, bjp, mm=NULL){
      countMatrix <- counts(dxd)
      sizeFactors <- colData(dxd)$sizeFactor
      isThis <- colData(dxd)$exon == "this"
      indexes1 <- getIndexList(dxd)
      if( is.null(mm) ){
          mm <- modelMatrixREUC(dxd, indexes1)
      }
      n <- bpnworkers(bjp)
      toSplit <- sort(rep(1:n, length.out=length(rownames(countMatrix))))
      matList <- lapply( split( rownames(countMatrix), toSplit ), function(x){
          countMatrix[x,]
      })
      dispDf <- bplapply( matList,
               function(x, coefsMatL, testableVectorL, mmL, sizeFactorsL, isThisL ){
                   path <- Sys.getenv("gtex")
                   source( file.path(path, "org", "reucFunctions.R") )
                   source( file.path(path, "org", "highLevelFunctions.R" ) )
                   estimateDispersionsForMat( x, coefsMatL,
                                             testableVectorL, mmL, sizeFactorsL,
                                             isThisL )
               }, coefsMatL=coefsMat, testableVectorL=testableVector,
               mmL=mm, sizeFactorsL=sizeFactors, isThisL=isThis,
               BPPARAM=bjp)
      do.call(rbind, dispDf)
  }


  fitDispersionFunction <- function( disps, means )
  {
     coefs <- c( .1, 1 )
     iter <- 0
     while(TRUE) {
        residuals <- disps / ( coefs[1] + coefs[2] / means )
        good <- which((residuals > 1e-4) & (residuals < 15))
        mm <- model.matrix(disps[good] ~ I(1/means[good]))
        fit <- try(glmgam.fit(mm, disps[good], coef.start=coefs), silent=TRUE)
        if(inherits(fit, "try-error")){
           stop("Failed to fit the dispersion function\n")
        }
        oldcoefs <- coefs
        coefs <- coefficients(fit)
        if(coefs[1] < 0){
           coefs[1] <- 0
           warning("Negative intercept value in the dispersion function, it will be set to 0. Check fit diagnostics plot section from the vignette.")
           break
        }
        if( sum( log( coefs / oldcoefs )^2 ) < .005 )
           break
        iter <- iter + 1
        if( iter > 10 ) {
           warning( "Dispersion fit did not converge." )
           break }
      }
      c(coefs[1], coefs[2])
  }
  
  getFinalDispersionEstimates <- function(dxd, rawDisps, plot=FALSE, threshold=10,
                                          thrMin=1e-4, thrMax=1, theshold2=0, thrMin2=1e-4, thrMax2=1, 
                                          commonThis=FALSE){
      meansThis <- rowMeans( featureCounts(dxd, normalized=TRUE) )
      dispsThis <- pmin(pmax( rawDisps[,"dispThis"], 1e-6 ), 10)
      toUse <- which(dispsThis > thrMin & dispsThis < thrMax & meansThis > threshold)
      cat("fitting this\n")
      if( !commonThis ){
          fittedDispsThis <- fitDispersionFunction(dispsThis[toUse], meansThis[toUse])
          fittedDispsThis <- fittedDispsThis[1] + fittedDispsThis[2]/meansThis
      }else{
          fittedDispsThis <- rep( mean( dispsThis[toUse] ), length.out=length(meansThis))
      }
      meansOthers <- rowMeans( counts(dxd, normalized=TRUE)[,colData(dxd)$exon=="others"] )
      dispsOthers <- pmin(pmax( rawDisps[,"dispOthers"], 1e-6), 10 )
      toUse <- which(dispsOthers > thrMin2 & dispsOthers < thrMax2 & meansOthers > theshold2)
      cat("fitting others\n")
      fittedDispsOthers <- fitDispersionFunction(dispsOthers[toUse], meansOthers[toUse])
      fittedDispsOthers <- fittedDispsOthers[1] + fittedDispsOthers[2]/meansOthers
      if(plot){
          par(mfrow=c(2, 1))
          plot( meansThis, dispsThis, log="xy", pch=19, cex=.3, col="#00000010")
          points(meansThis, fittedDispsThis, col="red", pch=19, cex=.3)
          plot( meansOthers, dispsOthers, log="xy", pch=19, cex=.3, col="#00000010")
          points(meansOthers, fittedDispsOthers, col="red", pch=19, cex=.3)
      }
      data.frame(
          dispThis=pmin( pmax( dispsThis, fittedDispsThis), 10 ),
          dispOthers=pmin( pmax( dispsOthers, fittedDispsOthers), 10) )
  }


#+END_SRC

** Estimate coefs with weak shrinkage

*** For REUCs

#+BEGIN_SRC R

  library(DEXSeq)
  library(pryr)
  path <- Sys.getenv("gtex")
  load(file.path(path, "objects", "dxdObjects.RData"))
  load(file.path(path, "objects", "testableVector.RData"))

  source( file.path(path, "org", "reucFunctions.R") )
  source( file.path(path, "org", "highLevelFunctions.R" ) )

  dispThis <- rep(0.1, length.out=nrow(dxd2))
  dispOthers <- rep(0.1, length.out=nrow(dxd2))
  names( dispThis ) <- rownames(dxd2)
  names( dispOthers ) <- rownames(dxd2)

  nCores=300
  source(file.path(path, "org", "useCluster.R"))

  allCoefsWeakShrinkage1 <- fitAllExonsParallel( dxd1, dispThis, dispOthers, priorsd=3, bjp )
  save( allCoefsWeakShrinkage1, file=file.path( path, "objects", "allCoefsWeakShrinkage1.RData") )

  allCoefsWeakShrinkage2 <- fitAllExonsParallel( dxd2, dispThis, dispOthers, priorsd=3, bjp )
  save( allCoefsWeakShrinkage2, file=file.path( path, "objects", "allCoefsWeakShrinkage2.RData") )

  allCoefsWeakShrinkage3 <- fitAllExonsParallel( dxd3, dispThis, dispOthers, priorsd=3, bjp )
  save( allCoefsWeakShrinkage3, file=file.path( path, "objects", "allCoefsWeakShrinkage3.RData") )

#+END_SRC

*** For alternative counts

#+BEGIN_SRC R

  library(DEXSeq)
  library(pryr)
  path <- Sys.getenv("gtex")

  load(file.path(path, "objects", "dxdJRObjects.RData"))
  load(file.path(path, "objects", "testableVector.RData"))

  source( file.path(path, "org", "reucFunctions.R") )
  source( file.path(path, "org", "highLevelFunctions.R" ) )

  dispThis <- rep(0.1, length.out=nrow(dxd2JR))
  dispOthers <- rep(0.1, length.out=nrow(dxd2JR))
  names( dispThis ) <- rownames(dxd2JR)
  names( dispOthers ) <- rownames(dxd2JR)
  nCores=300
  source(file.path(path, "org", "useCluster.R"))


  allCoefsWeakShrinkageJR1 <- fitAllExonsParallel( dxd1JR, dispThis, dispOthers, priorsd=3, bjp )
  save( allCoefsWeakShrinkageJR1, file=file.path( path, "objects", "allCoefsWeakShrinkageJR1.RData") )


  allCoefsWeakShrinkageJR2 <- fitAllExonsParallel( dxd2JR, dispThis, dispOthers, priorsd=3, bjp )

  save( allCoefsWeakShrinkageJR2, file=file.path( path, "objects", "allCoefsWeakShrinkageJR2.RData") )
  allCoefsWeakShrinkageJR3 <- fitAllExonsParallel( dxd3JR, dispThis, dispOthers, priorsd=3, bjp )
  save( allCoefsWeakShrinkageJR3, file=file.path( path, "objects", "allCoefsWeakShrinkageJR3.RData") )


#+END_SRC

** Estimating dispersions

*** For REUCs

#+BEGIN_SRC R
  
  library(DEXSeq)
  library(pryr)
  path <- Sys.getenv("gtex")
  
  load(file.path(path, "objects", "dxdObjects.RData"))
  load(file.path(path, "objects", "testableVector.RData"))
  
  source( file.path(path, "org", "reucFunctions.R") )
  source( file.path(path, "org", "highLevelFunctions.R" ) )
     
  nCores=300
  source( file.path(path, "org", "useCluster.R") )
  
  load( file.path( path, "objects", "allCoefsWeakShrinkage1.RData"))
  rawDisps1 <- estimateDispersionsParallel( dxd1, allCoefsWeakShrinkage1, bjp )
  save( rawDisps1, file=file.path( path, "objects", "rawDisps1.RData"))
  
  load(file.path( path, "objects", "allCoefsWeakShrinkage2.RData") )
  rawDisps2 <- estimateDispersionsParallel( dxd2, allCoefsWeakShrinkage2, bjp )
  save( rawDisps2, file=file.path( path, "objects", "rawDisps2.RData") )
  
  load(file.path( path, "objects", "allCoefsWeakShrinkage3.RData") )
  rawDisps3 <- estimateDispersionsParallel( dxd3, allCoefsWeakShrinkage3, bjp )
  save( rawDisps3, file=file.path( path, "objects", "rawDisps3.RData") )
  
#+END_SRC

Sharing information across exons

#+BEGIN_SRC R

  library(DEXSeq)
  library(pryr)
  library(statmod)
  path <- Sys.getenv("gtex")

  source( file.path(path, "org", "reucFunctions.R") )
  source( file.path(path, "org", "highLevelFunctions.R") )

  load( file.path(path, "objects", "dxdObjects.RData"))
  load( file.path(path, "objects", "rawDisps1.RData"))
  load( file.path(path, "objects", "rawDisps2.RData"))
  load( file.path(path, "objects", "rawDisps3.RData"))

    
  newDisps1 <- getFinalDispersionEstimates( dxd1, rawDisps1, plot=FALSE )

  newDisps2 <- getFinalDispersionEstimates( dxd2, rawDisps2, plot=FALSE )

  newDisps3 <- getFinalDispersionEstimates( dxd3, rawDisps3, plot=FALSE,
                                           threshold=0,
                                           thrMin=1e-3, thrMax=1)

  save( newDisps1, newDisps2, newDisps3, file=file.path( path, "objects", "newDisps.RData") )

#+END_SRC

*** For junction reads REUCs

#+BEGIN_SRC R

  library(DEXSeq)
  library(pryr)
  path <- Sys.getenv("gtex")

  load(file.path(path, "objects", "dxdJRObjects.RData"))
    
  source( file.path(path, "org", "reucFunctions.R") )
  source( file.path(path, "org", "highLevelFunctions.R" ) )
       
  nCores=200
  source( file.path(path, "org", "useCluster.R") )
    
  load( file.path( path, "objects", "allCoefsWeakShrinkageJR1.RData")) 
  testableVector <- rep(TRUE, nrow(dxd1JR))

  rawDispsJR1 <- estimateDispersionsParallel( dxd1JR, allCoefsWeakShrinkageJR1, bjp )
  save( rawDispsJR1, file=file.path( path, "objects", "rawDispsJR1.RData"))

  load( file.path( path, "objects", "allCoefsWeakShrinkageJR2.RData")) 
  #testableVector <- mcols(dxd2JR)$testable
  rawDispsJR2 <- estimateDispersionsParallel( dxd2JR, allCoefsWeakShrinkageJR2, bjp )
  save( rawDispsJR2, file=file.path( path, "objects", "rawDispsJR2.RData"))

  load( file.path( path, "objects", "allCoefsWeakShrinkageJR3.RData")) 
  #testableVector <- mcols(dxd3JR)$testable
  rawDispsJR3 <- estimateDispersionsParallel( dxd3JR, allCoefsWeakShrinkageJR3, bjp )
  save( rawDispsJR3, file=file.path( path, "objects", "rawDispsJR3.RData"))

#+END_SRC

#+BEGIN_SRC R

  library(DEXSeq)
  library(pryr)

  path <- Sys.getenv("gtex")
  load(file.path(path, "objects", "dxdJRObjects.RData"))

  source( file.path(path, "org", "reucFunctions.R") )
  source( file.path(path, "org", "highLevelFunctions.R" ) )
       
  load( file.path(path, "objects", "rawDispsJR1.RData" ) )
  load( file.path(path, "objects", "rawDispsJR2.RData" ) )
  load( file.path(path, "objects", "rawDispsJR3.RData" ) )

  newDispsJR1 <- getFinalDispersionEstimates( dxd1JR, rawDispsJR1, plot=FALSE, commonThis=FALSE, threshold=1, theshold2=1)

  newDispsJR2 <- getFinalDispersionEstimates( dxd2JR, rawDispsJR2, plot=FALSE, commonThis=FALSE, threshold=1, theshold2=1)

  newDispsJR3 <- getFinalDispersionEstimates( dxd3JR, rawDispsJR3, plot=FALSE, commonThis=FALSE, threshold=1, theshold2=1)

  save( newDispsJR1, newDispsJR2, newDispsJR3, file=file.path( path, "objects", "newDispsJR.RData" ) )

#+END_SRC


*** For testing

#+BEGIN_SRC R

  library(DEXSeq)
  library(pryr)
  path <- Sys.getenv("gtex")

  load(file.path(path, "objects", "dxdObjects.RData"))

  source( file.path(path, "org", "reucFunctions.R") )
  source( file.path(path, "org", "highLevelFunctions.R" ) )
     
  nCores=15
  source( file.path(path, "org", "useCluster.R") )

  estimateMuHat <- function(dxd, bjp){
      countMatrix <- counts(dxd)
      modelFrame <- as.data.frame( colData(dxd) )
      mm <- DEXSeq:::rmDepCols(model.matrix( ~ sample + exon + sex:exon + individual:exon + tissue:exon,
                                        modelFrame) )
      toSplit <- sort(rep(1:bpnworkers(bjp), length.out=nrow(countMatrix)))
      spMat <- split(as.data.frame(countMatrix), toSplit)
      muhatsAll <- bplapply(spMat, function(countMat, modelFrameZ, mmZ){
          mh <- lapply( rownames(countMat), function(ex){
              cat(sprintf("estimating muhats for %s\n", ex))
              i <- rownames(countMat) %in% ex
              y <- as.numeric(countMat[i,])
              y <- pmax(y, 1e-6)
              weights <- rep(1, ncol(countMat))
              fit <- lm.wfit(mmZ, log(y) - modelFrameZ$sizeFactor, weights)
              mu <- fit$fitted.values + modelFrameZ$sizeFactor
              mu
          })
          mh <- do.call(rbind, mh)
          rownames(mh) <- rownames(countMat)
          mh
      }, modelFrameZ=modelFrame, mmZ=mm, BPPARAM=bjp)
      muhatsAll <- do.call(rbind, muhatsAll)
      muhatsAll
  }


  muhats1 <- estimateMuHat(dxd1, bjp)

  muhats2 <- estimateMuHat(dxd2, bjp)

  muhats3 <- estimateMuHat(dxd3, bjp)

  head( muhats3 )

  save( muhats1, muhats2, muhats3,
       file=file.path( path, "objects", "muhats.RData" ) )

#+END_SRC

#+BEGIN_SRC R

  library(DEXSeq)
  library(pryr)
  path <- Sys.getenv("gtex")
   
  source( file.path(path, "org", "reucFunctions.R") )
  source( file.path(path, "org", "highLevelFunctions.R" ) )
     
  nCores=200
  source( file.path(path, "org", "useCluster.R") )


  estimateTestDispersionsParallel <- function(dxd, formula, bjp){
      toSplit <- sort(rep(1:bpnworkers(bjp), length.out=nrow(dxd)))
      spMat <- split( as.data.frame(counts(dxd)), toSplit )
      mm <- DEXSeq:::rmDepCols( model.matrix(formula, as.data.frame(colData(dxd))))
      sizeFactors <- colData(dxd)$sizeFactor
      dispsAll <- bplapply( spMat, function(x, testableVectorZ, mmZ, sizeFactorsZ){
             library(statmod)
             path <- Sys.getenv("gtex")
             source( file.path(path, "org", "reucFunctions.R") )
             source( file.path(path, "org", "highLevelFunctions.R" ) )
             disps <- sapply( rownames(x), function(ex){
                        cat(sprintf("fitting %s\n", ex))
                        if( ! testableVectorZ[ex]){
                            return(NA)
                        }
                        counts <- as.numeric(x[ex,])
                        dp <- try( estimateOneDispersionTRT( mmZ, counts, sizeFactorsZ) )
                        if( !inherits( dp, "try-error" ) ){
                            dp
                        }else{
                            NA
                        }
                    })
             names( disps ) <- rownames(x)
             disps
         },
           testableVectorZ=testableVector,
           mmZ=mm, sizeFactorsZ=sizeFactors, BPPARAM=bjp)
      dispsAll <- unlist(dispsAll)
      dispsAll
  }

  formula <- ~ sample + exon + sex:exon + individual:exon + tissue:exon
  load(file.path(path, "objects", "testableVector.RData"))
   
  load(file.path(path, "objects", "dxdObjects.RData"))

  #estimateTestDispersionsParallel(dxd1[1:200,], formula, bjp)

  rawTestDisps1 <- estimateTestDispersionsParallel(dxd1, formula, bjp)
  save(rawTestDisps1, file=file.path(path, "objects", "rawTestDisps1.RData") )


  rawTestDisps2 <- estimateTestDispersionsParallel(dxd2, formula, bjp)
  save(rawTestDisps2, file=file.path(path, "objects", "rawTestDisps2.RData") )

  rawTestDisps3 <- estimateTestDispersionsParallel(dxd3, formula, bjp)
  save(rawTestDisps3, file=file.path(path, "objects", "rawTestDisps3.RData") )

#+END_SRC

 Sharing information across exons

#+BEGIN_SRC R

  library(DEXSeq)
  library(pryr)
  library(statmod)
  path <- Sys.getenv("gtex")

  load(file.path(path, "objects", "dxdObjects.RData"))
  load( file.path(path, "objects", "rawTestDisps1.RData"))
  load( file.path(path, "objects", "rawTestDisps2.RData"))
  load( file.path(path, "objects", "rawTestDisps3.RData"))

  source( file.path(path, "org", "reucFunctions.R") )
  source( file.path(path, "org", "highLevelFunctions.R" ) )

    
  newTestDisps1 <- getFinalDispersionEstimates( dxd1, rawTestDisps1, plot=FALSE, thrMin=1e-5,
                                               theshold2=10, thrMax=.1)

  newTestDisps2 <- getFinalDispersionEstimates( dxd2, rawTestDisps2, plot=FALSE, thrMin=1e-6,
                                               thrMax=.1, theshold2=40)

  newTestDisps3 <- getFinalDispersionEstimates( dxd3, rawTestDisps3, plot=FALSE, thrMax=.1,
                                           theshold2=40)

  save( newTestDisps1, newTestDisps2, newTestDisps3, file=file.path( path, "objects", "newTestDisps.RData") )

#+END_SRC

** Shrinkage fit with proper priors
*** For REUCs

#+BEGIN_SRC R

  library(DEXSeq)
  library(pryr)

  path <- Sys.getenv("gtex")
  load( file.path(path, "objects", "dxdObjects.RData") )
  load( file.path(path, "objects", "testableVector.RData") )
  #load( file.path(path, "objects", "newDisps.RData") )
  load( file.path(path, "objects", "rawDisps1.RData") )
  load( file.path(path, "objects", "rawDisps2.RData") )
  load( file.path(path, "objects", "rawDisps3.RData") )


  source( file.path(path, "org", "reucFunctions.R") )
  source( file.path(path, "org", "highLevelFunctions.R" ) )

  nCores=200
  source(file.path(path, "org", "useCluster.R"))
   
  dispThis <- pmax( pmin( rawDisps1[,"dispThis"], 10 ), 1e-6 )
  dispOthers <- pmax( pmin( rawDisps1[,"dispOthers"], 10 ), 1e-6 )

  allCoefsGoodShrinkage1 <- fitAllExonsParallel( dxd1, dispThis,
                                                dispOthers, priorsd=0.05, bjp )

  save( allCoefsGoodShrinkage1, file=file.path( path, "objects", "allCoefsGoodShrinkage1.RData") )

  rm( allCoefsGoodShrinkage1, dxd1 )

  dispThis <- pmax( pmin( rawDisps2[,"dispThis"], 10 ), 1e-6 )
  dispOthers <- pmax( pmin( rawDisps2[,"dispOthers"], 10 ), 1e-6 )

  allCoefsGoodShrinkage2 <- fitAllExonsParallel( dxd2, dispThis, dispOthers,
                                                priorsd=0.05, bjp )

  save( allCoefsGoodShrinkage2, file=file.path( path, "objects", "allCoefsGoodShrinkage2.RData") )

  rm(allCoefsGoodShrinkage2, dxd2)

  dispThis <- pmax( pmin( rawDisps3[,"dispThis"], 10 ), 1e-6 )
  dispOthers <- pmax( pmin( rawDisps3[,"dispOthers"], 10 ), 1e-6 )

  allCoefsGoodShrinkage3 <- fitAllExonsParallel( dxd3, dispThis, dispOthers,
                                                priorsd=0.05, bjp )

  save( allCoefsGoodShrinkage3, file=file.path( path, "objects", "allCoefsGoodShrinkage3.RData") )

#+END_SRC

*** For JR REUCs

#+BEGIN_SRC R

  library(DEXSeq)
  library(pryr)

  path <- Sys.getenv("gtex")

  load( file.path(path, "objects", "dxdJRObjects.RData") )
  load( file.path(path, "objects", "rawDispsJR1.RData" ) )
  load( file.path(path, "objects", "rawDispsJR2.RData" ) )
  load( file.path(path, "objects", "rawDispsJR3.RData" ) )
  load( file.path(path, "objects", "testableVector.RData") )

  #load( file.path(path, "objects", "newDispsJR.RData") )

  source( file.path(path, "org", "reucFunctions.R") )
  source( file.path(path, "org", "highLevelFunctions.R" ) )

  nCores=200
  source(file.path(path, "org", "useCluster.R"))

  dispThis <- pmax( pmin( rawDispsJR1[,"dispThis"], 10 ), 1e-6 )
  dispOthers <- pmax( pmin( rawDispsJR1[,"dispOthers"], 10 ), 1e-6 )

  allCoefsGoodShrinkageJR1 <- fitAllExonsParallel( dxd1JR, dispThis, dispOthers, priorsd=0.05, bjp )

  save( allCoefsGoodShrinkageJR1, file=file.path( path, "objects", "allCoefsGoodShrinkageJR1.RData") )

  rm(allCoefsGoodShrinkageJR1)

  dispThis <- pmax( pmin( rawDispsJR2[,"dispThis"], 10 ), 1e-6 )
  dispOthers <- pmax( pmin( rawDispsJR2[,"dispOthers"], 10 ), 1e-6 )

  allCoefsGoodShrinkageJR2 <- fitAllExonsParallel( dxd2JR, dispThis, dispOthers, priorsd=0.05, bjp )

  save( allCoefsGoodShrinkageJR2, file=file.path( path, "objects", "allCoefsGoodShrinkageJR2.RData") )

  rm( allCoefsGoodShrinkageJR2 )

  dispThis <- pmax( pmin( rawDispsJR3[,"dispThis"], 10 ), 1e-6 )
  dispOthers <- pmax( pmin( rawDispsJR3[,"dispOthers"], 10 ), 1e-6 )

  allCoefsGoodShrinkageJR3 <- fitAllExonsParallel( dxd3JR, dispThis, dispOthers, priorsd=0.05, bjp )

  save( allCoefsGoodShrinkageJR3, file=file.path( path, "objects", "allCoefsGoodShrinkageJR3.RData") )



#+END_SRC

** Check plots 

#+BEGIN_SRC R
  
  library(DEXSeq)
  library(genefilter)
  library(ggplot2)
  
  path <- Sys.getenv("gtex")
  load( file.path(path, "objects", "dxdObjects.RData") )
  load( file.path(path, "objects", "dxdJRObjects.RData") )
  
  load( file.path(path, "objects", "allCoefsGoodShrinkage1.RData") )
  load( file.path(path, "objects", "allCoefsWeakShrinkage1.RData") )
  load( file.path(path, "objects", "allCoefsGoodShrinkage2.RData") )
  load( file.path(path, "objects", "allCoefsWeakShrinkage2.RData") )
  load( file.path(path, "objects", "allCoefsGoodShrinkage3.RData") )
  load( file.path(path, "objects", "allCoefsWeakShrinkage3.RData") )
  load( file.path(path, "objects", "allCoefsGoodShrinkageJR1.RData") )
  load( file.path(path, "objects", "allCoefsWeakShrinkageJR1.RData") )
  load( file.path(path, "objects", "allCoefsGoodShrinkageJR2.RData") )
  load( file.path(path, "objects", "allCoefsWeakShrinkageJR2.RData") )
  load( file.path(path, "objects", "allCoefsGoodShrinkageJR3.RData") )
  load( file.path(path, "objects", "allCoefsWeakShrinkageJR3.RData") )
  
  load( file.path(path, "objects", "testableVector.RData") )
  
  source( file.path(path, "org", "reucFunctions.R") )
  
  getInfoForDataFrame <- function(dxd, allCoefsWeakShrinkage, allCoefsGoodShrinkage, label){
      crossCols <- getIndexList(dxd)[["crossIdx"]]$col
      rSdsWeak <- rowSds( allCoefsWeakShrinkage[,crossCols] )  / log(2)
      rSdsGood <- rowSds( allCoefsGoodShrinkage[,crossCols] ) / log(2)
      rMeans <- rowMeans( log2(featureCounts( dxd, normalized=TRUE ) ))
      testableVectorV <- testableVector & rMeans > 2
      data.frame( mean=rep( rMeans[testableVectorV], 2 ),
           sds=c(rSdsWeak[testableVectorV], rSdsGood[testableVectorV] ),
           shrinkage=rep( c("weak (priorsd = 3)", "strong (priorsd=0.05)"),
               each=sum(as.numeric(testableVectorV)) ),
           subset=label)
  }
  
  plotDf <- do.call(rbind, list(
      getInfoForDataFrame( dxd1, allCoefsWeakShrinkage1, allCoefsGoodShrinkage1, "subset1"),
      getInfoForDataFrame( dxd2, allCoefsWeakShrinkage2, allCoefsGoodShrinkage2, "subset2"),
      getInfoForDataFrame( dxd3, allCoefsWeakShrinkage3, allCoefsGoodShrinkage3, "subset3"),
      getInfoForDataFrame( dxd1JR, allCoefsWeakShrinkageJR1, allCoefsGoodShrinkageJR1, "subset1JR"),
      getInfoForDataFrame( dxd2JR, allCoefsWeakShrinkageJR2, allCoefsGoodShrinkageJR2, "subset2JR"),
      getInfoForDataFrame( dxd3JR, allCoefsWeakShrinkageJR3, allCoefsGoodShrinkageJR3, "subset3JR") ) )
  
  save( plotDf, file=file.path(path, "objects", "plotDf.RData") )
  
  plot <- ggplot( plotDf, aes( x=mean, y=sds ) ) + 
          geom_point(colour="#15151510", size=.9) +
          facet_grid( subset~shrinkage ) + xlim(0, 15) + ylim(0, 1) +
          xlab("Mean count (log2)") +
          ylab("Standard deviation") + theme(
              strip.background = element_rect(colour="white", fill="white"), 
                        strip.text =element_text(size = 14),
          panel.border = element_rect(colour = "white", fill=NA),
          axis.line=element_line(colour="black"),
          axis.text = element_text(size=14, colour="black"),
          axis.title=element_text(size=14, vjust=.2),
          legend.position="none",
          panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_rect(colour = "black", fill=NA, size=1) )
  
  
  png( file.path(path, "plots", "shrinkageEffects.png"), res=200,
      height=10, width=7, units="in")
  print( plot )
  dev.off()
  getwd()

#+END_SRC

** Arrange into a 3d objects and estimate scores

#+BEGIN_SRC R

  library(DEXSeq)
  library(genefilter)
  library(ggplot2)
  library(abind)
  library(pryr)

  path <- Sys.getenv("gtex")

  source( file.path(path, "org", "reucFunctions.R") )

  load( file.path(path, "objects", "dxdObjects.RData") )
  load( file.path(path, "objects", "allCoefsGoodShrinkage1.RData") )
  load( file.path(path, "objects", "allCoefsGoodShrinkage2.RData") )
  load( file.path(path, "objects", "allCoefsGoodShrinkage3.RData") )

  load( file.path(path, "objects", "dxdJRObjects.RData") )

  load( file.path(path, "objects", "allCoefsGoodShrinkageJR1.RData") )
  load( file.path(path, "objects", "allCoefsGoodShrinkageJR2.RData") )
  load( file.path(path, "objects", "allCoefsGoodShrinkageJR3.RData") )

  arrangeInto3DArray <- function(dxd, allCoefs){
      crossIdx <- getIndexList(dxd)[["crossIdx"]]
      crossCoefs <- do.call( abind, c( along=3, 
          tapply( 1:nrow(crossIdx), crossIdx$tissue, function(i) {
              x <- allCoefs[,crossIdx$col[i]]; 
              colnames(x) <- crossIdx$individual[i]; 
              x} ) ) )
      names(dimnames(crossCoefs)) <- c("exon", "individual", "tissue")
      crossCoefs
  }


  crossCoefs1 <- arrangeInto3DArray( dxd1, allCoefsGoodShrinkage1 )
  crossCoefs2 <- arrangeInto3DArray( dxd2, allCoefsGoodShrinkage2 )
  crossCoefs3 <- arrangeInto3DArray( dxd3, allCoefsGoodShrinkage3 )

  crossCoefsJR1 <- arrangeInto3DArray( dxd1JR, allCoefsGoodShrinkageJR1 )
  crossCoefsJR2 <- arrangeInto3DArray( dxd2JR, allCoefsGoodShrinkageJR2 )
  crossCoefsJR3 <- arrangeInto3DArray( dxd3JR, allCoefsGoodShrinkageJR3 )


  tissueNameConversions <- c("Caudate", "Cerebellar hemisphere", "Cerebellum", "Cortex",
                                         "Frontal cortex", "Hippocampus", "Nucleus accumbens",
                                         "Putamen", "Subcutaneous", "Artery tibial", "Esophagus mucosa",
                             "Lung",
                                         "Muscle skeletal", "Nerve tibial", "Skin sun exposed", "Thyroid",
                                         "Whole blood", "Artery aorta", "Colon", "Esophagus muscularis",
                             "Heart", "Pancreas", "Stomach")
  names(tissueNameConversions) <- c( dimnames(crossCoefs1)[["tissue"]], dimnames(crossCoefs2)[["tissue"]],
                                    dimnames(crossCoefs3)[["tissue"]])

  dimnames(crossCoefs1)[["tissue"]] <- tissueNameConversions[dimnames(crossCoefs1)[["tissue"]]]
  dimnames(crossCoefs2)[["tissue"]] <- tissueNameConversions[dimnames(crossCoefs2)[["tissue"]]]
  dimnames(crossCoefs3)[["tissue"]] <- tissueNameConversions[dimnames(crossCoefs3)[["tissue"]]]

  dimnames(crossCoefsJR1)[["tissue"]] <- tissueNameConversions[dimnames(crossCoefsJR1)[["tissue"]]]
  dimnames(crossCoefsJR2)[["tissue"]] <- tissueNameConversions[dimnames(crossCoefsJR2)[["tissue"]]]
  dimnames(crossCoefsJR3)[["tissue"]] <- tissueNameConversions[dimnames(crossCoefsJR3)[["tissue"]]]

  save( tissueNameConversions, file=file.path( path, "objects", "tissueNameConversions.RData") )

  save(crossCoefs1, file=file.path(path, "objects", "crossCoefs1.RData") )
  save(crossCoefs2, file=file.path(path, "objects", "crossCoefs2.RData") )
  save(crossCoefs3, file=file.path(path, "objects", "crossCoefs3.RData") )

  save(crossCoefsJR1, file=file.path(path, "objects", "crossCoefsJR1.RData") )
  save(crossCoefsJR2, file=file.path(path, "objects", "crossCoefsJR2.RData") )
  save(crossCoefsJR3, file=file.path(path, "objects", "crossCoefsJR3.RData") )

  arrangeInto2DArray <- function(dxd, allCoefs){   
      col <- getIndexList(dxd)[["crossIdx"]]$col
      allCoefs <- allCoefs[,col]
      colNames <- colnames( allCoefs )
      colNames <- gsub("tissue_|individual_", "", colNames)
      spNames <- strsplit( colNames, ":" )
      colnames(allCoefs) <- paste( tissueNameConversions[sapply( spNames, "[[", 1 )],
            sapply( spNames, "[[", 2 ), sep=":" )
      allCoefs
  }

  crossCoefs2D1 <- arrangeInto2DArray(dxd1, allCoefsGoodShrinkage1)
  crossCoefs2D2 <- arrangeInto2DArray(dxd2, allCoefsGoodShrinkage2)
  crossCoefs2D3 <- arrangeInto2DArray(dxd3, allCoefsGoodShrinkage3)

  crossCoefs2DJR1 <- arrangeInto2DArray(dxd1JR, allCoefsGoodShrinkageJR1)
  crossCoefs2DJR2 <- arrangeInto2DArray(dxd2JR, allCoefsGoodShrinkageJR2)
  crossCoefs2DJR3 <- arrangeInto2DArray(dxd3JR, allCoefsGoodShrinkageJR3)

  save( crossCoefs2D1, file=file.path(path, "objects", "crossCoefs2D1.RData") )
  save( crossCoefs2D2, file=file.path(path, "objects", "crossCoefs2D2.RData") )
  save( crossCoefs2D3, file=file.path(path, "objects", "crossCoefs2D3.RData") )

  save( crossCoefs2DJR1, file=file.path(path, "objects", "crossCoefs2DJR1.RData") )
  save( crossCoefs2DJR2, file=file.path(path, "objects", "crossCoefs2DJR2.RData") )
  save( crossCoefs2DJR3, file=file.path(path, "objects", "crossCoefs2DJR3.RData") )

#+END_SRC


* Analysis
  
** Estimate covariances 

#+BEGIN_SRC R
  
  library(DEXSeq)
  library(ggplot2)
  library(RColorBrewer)
  library(GenomicFeatures)
  library(ggbio)
  path <- Sys.getenv("gtex")
  
  load( file.path(path, "objects", "dxdObjects.RData") )
  load( file.path(path, "objects", "crossCoefs1.RData") )
  load( file.path(path, "objects", "crossCoefs2.RData") )
  load( file.path(path, "objects", "crossCoefs3.RData") )
  
  estimateCovariancePairs <- function(crossCoefs){
      individualPairs <- t( combn( dimnames(crossCoefs)[["individual"]], 2 ) )
      rownames(individualPairs) <- paste( individualPairs[,1], individualPairs[,2], sep=":" )
      sppCovs <- bplapply( seq_len(dim(crossCoefs)[1]), function(x){
          cv <- cov( t(crossCoefs[x,,]) )
          apply( individualPairs, 1, function(spp){
              cv[spp[1],spp[2]]
          })
      }, BPPARAM=MulticoreParam(10))
      sppCovs <- do.call(rbind, sppCovs )
      rownames( sppCovs ) <- dimnames(crossCoefs1)[["exon"]]
      sppCovs
  }
  
  estimateCorrelationPairs <- function(crossCoefs){
      individualPairs <- t( combn( dimnames(crossCoefs)[["individual"]], 2 ) )
      rownames(individualPairs) <- paste( individualPairs[,1], individualPairs[,2], sep=":" )
      sppCovs <- bplapply( seq_len(dim(crossCoefs)[1]), function(x){
          cv <- cor( t(crossCoefs[x,,]), method="spearman")
          apply( individualPairs, 1, function(spp){
              cv[spp[1],spp[2]]
          })
      }, BPPARAM=MulticoreParam(10))
      sppCovs <- do.call(rbind, sppCovs )
      rownames( sppCovs ) <- dimnames(crossCoefs1)[["exon"]]
      sppCovs
  }
  
  sppCov1 <- estimateCovariancePairs( crossCoefs1 )
  sppCov2 <- estimateCovariancePairs( crossCoefs2 )
  sppCov3 <- estimateCovariancePairs( crossCoefs3 )
  
  sppCor1 <- estimateCorrelationPairs( crossCoefs1 )
  sppCor2 <- estimateCorrelationPairs( crossCoefs2 )
  sppCor3 <- estimateCorrelationPairs( crossCoefs3 )
  
  save( sppCov1, sppCov2, sppCov3,
       file=file.path(path, "objects", "sppCovs.RData") )
  
  load( file.path(path, "objects", "sppCovs.RData") )
  
  padjPattern <- function(sppCovs){
      padjCov <- apply( sppCovs, 2, function(a){
          ec <- ecdf( a )
          ec( -a ) / ( 1 - ec( a ) )
      })
      rownames( padjCov ) <- rownames( sppCovs )
      padjCov
  }
  
  padjCov1 <- padjPattern(sppCov1)
  padjCov2 <- padjPattern(sppCov2)
  padjCov3 <- padjPattern(sppCov3)
  
  estimateThreshold <- function(sppCov, padjCov){
      covThrSp <- sapply( colnames(padjCov),
                     function(spp){
                         passThr <- padjCov[,spp] < .1
                         min( sppCov[passThr, spp ], na.rm=TRUE)
                     })
      median(covThrSp[!is.infinite(covThrSp)])
  }
  
  
  thspp1 <- estimateThreshold( sppCov1, padjCov1 )
  thspp2 <- estimateThreshold( sppCov2, padjCov2 )
  thspp3 <- estimateThreshold( sppCov3, padjCov3 )
  
  
  getStrict <- function(sppCov, thspp){
      strict <- rowSums( sppCov > thspp )
      names(strict[which(strict == ncol(sppCov))])
  }
  
  strict1 <- getStrict( sppCov1, thspp1 )
  strict2 <- getStrict( sppCov2, thspp2 )
  strict3 <- getStrict( sppCov3, thspp3 )
  
  save( strict1, strict2, strict3,
       file=file.path( path, "objects", "strictTDU.RData") )
  
  table( table( sapply( strsplit( strict3, ":" ), "[[", 1) ) )
  
  table( sapply( strsplit( strict1, ":" ), "[[", 1 ) )
  
  source( file.path( path, "org", "visualization.R" ) )
  transcriptDb <- loadDb( file.path(path, "objects", "GRCh38.sqlite") )
  
  ## nice example
  
  plotGeneREUCs( crossCoefs2, "ENSG00000005243" )
  x11()
  plotTranscripts(dxd2, "ENSG00000005243", scoreVec=ifelse( rownames(sppCov2) %in% strict2, 0, 10 ), transcriptDb=transcriptDb)
  
  
  
  plotGeneREUCs( crossCoefs1, "ENSG00000166501" )
  x11()
  plotTranscripts(dxd1, "ENSG00000166501", scoreVec=ifelse( rownames(sppCov1) %in% strict1, 0, 10 ), transcriptDb=transcriptDb)
  
  
#+END_SRC

** PCA plots

#+BEGIN_SRC R
  
  library(DEXSeq)
  library(ggplot2)
  library(RColorBrewer)
  library(genefilter)
  library(gridExtra)
  
  path <- Sys.getenv("gtex")
  load( file.path(path, "objects", "testableVector.RData") )
  
  load( file.path(path, "objects", "crossCoefs2D1.RData") )
  load( file.path(path, "objects", "crossCoefs2D2.RData") )
  load( file.path(path, "objects", "crossCoefs2D3.RData") )
  load( file.path(path, "objects", "crossCoefs2DJR1.RData") )
  load( file.path(path, "objects", "crossCoefs2DJR2.RData") )
  load( file.path(path, "objects", "crossCoefs2DJR3.RData") )
  load( file.path(path, "objects", "expressionData.RData") )
  
  plotREUCPCA <- function(allCrossCoefs, label="REUC"){
      rVars <- rowVars( allCrossCoefs )
      top <- round(table( testableVector )["TRUE"] * .05)
      topVarExons <- names( head( rVars[order( rVars, decreasing=TRUE )], top ) )
      pcaRes <- prcomp( t(allCrossCoefs[topVarExons,] ))
  #    topVarExons <- !is.na( rVars )
  #    pcaRes <- prcomp( t(allCrossCoefs[topVarExons,] ) )
      df <- t(as.data.frame(strsplit( rownames(pcaRes$x), ":" )))
      rownames(df) <- NULL
      colnames(df) <- c("tissue", "individual")
      df <- data.frame(df, stringsAsFactors=TRUE)
      df$PC1 <- pcaRes$x[,"PC1"]
      df$PC2 <- pcaRes$x[,"PC2"]
      df$measure <- label
      df
  }
  
  plotAllPCA <- function( crossCoefs, crossCoefsJR, exprData ){
      dfREUC <- plotREUCPCA( crossCoefs, "REUC" )
      dfPSI <- plotREUCPCA( crossCoefsJR, "PSI" )
      dfExpr <- plotREUCPCA( exprData, "Gene expression" )
      shapes <- rep( c(15, 16, 17), length.out=length(levels(dfExpr$tissue )))
      mREUC <- ggplot( dfREUC, aes(x=PC1, y=PC2) ) +
          geom_point(aes(color=tissue, shape=tissue), size=2.5, alpha=.8) +
          theme(text=element_text(color="black", size=13) ) +
          scale_shape_manual(values=shapes) +
          coord_fixed(ratio=1) + labs(title = "REUC") + theme(legend.position = "none")
      mPSI <- ggplot( dfPSI, aes(x=PC1, y=PC2) ) +
          geom_point(aes(color=tissue, shape=tissue), size=2.5, alpha=.8) +
          theme(text=element_text(color="black", size=13) ) +
          scale_shape_manual(values=shapes) +
          coord_fixed(ratio=1) + labs(title = "PSI") + theme(legend.position = "none")
      mExpr <- ggplot( dfExpr, aes(x=PC1, y=PC2) ) +
          geom_point(aes(color=tissue, shape=tissue), size=2.5, alpha=.8) +
          theme(text=element_text(color="black", size=13) ) +
          scale_shape_manual(values=shapes) +
          coord_fixed(ratio=1) + labs(title = "Gene expression") + theme( legend.position="top" )
      g_legend<-function(a.gplot){
          tmp <- ggplot_gtable(ggplot_build(a.gplot))
          leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
          legend <- tmp$grobs[[leg]]
          return(legend)}
      legend <-  g_legend( mExpr )
      grid.arrange( legend, arrangeGrob( mExpr + theme(legend.position="none"), mREUC, mPSI, nrow=1),
                   nrow=2, heights=c(2, 10))
  }
  
  png( file.path(path, "plots", "pca_set1.png"), height=6, width=13, res=200, unit="in")
  plotAllPCA( crossCoefs2D1, crossCoefs2DJR1, exprData1 )
  dev.off()
  
  png( file.path(path, "plots", "pca_set2.png"), height=6, width=13, res=200, unit="in")
  plotAllPCA( crossCoefs2D2, crossCoefs2DJR2, exprData2 )
  dev.off()
  
  png( file.path(path, "plots", "pca_set3.png"), height=6, width=13, res=200, unit="in")
  plotAllPCA( crossCoefs2D3, crossCoefs2DJR3, exprData3 )
  dev.off()
  
  transcriptDb <- loadDb( file.path(path, "objects", "GRCh38.sqlite") )
  
  source(file.path(path, "org", "visualization.R") )
  
  geneName <- "ENSG00000184277"
  plotGeneREUCs( crossCoefs1, geneName)
  x11()
  plotTranscripts( dxd1, geneName, FDR=.5,
                  scoreVec=ncol(sppCov1) - consPairs, transcriptDb )
  
  
#+END_SRC

** Variability analysis

#+BEGIN_SRC R
  
  library(DEXSeq)
  path <- Sys.getenv("gtex")
  load( file.path(path, "objects", "crossCoefs2D1.RData") )
  load( file.path(path, "objects", "crossCoefs2D2.RData") )
  load( file.path(path, "objects", "crossCoefs2D3.RData") )
  
  load( file.path(path, "objects", "crossCoefs2DJR1.RData") )
  load( file.path(path, "objects", "crossCoefs2DJR2.RData") )
  load( file.path(path, "objects", "crossCoefs2DJR3.RData") )
  
  varianceExplainedFunction <- function(crossCoefs){
      df <- t(data.frame(strsplit(colnames( crossCoefs ), ":")))
      rownames( df ) <- NULL
      colnames(df) <- c("tissue", "individual")
      df <- data.frame(df, stringsAsFactors=TRUE)
      varExplained <- bplapply(seq_len(nrow(crossCoefs)), function(x){
          cat( sprintf("exon %s\n", x) )
          df$reuc <- crossCoefs[x,]
          if( any( is.na( df$reuc ) ) ){
              return(rep(NA, 5))
          }else{
              anovaRes <- anova(lm( reuc ~ individual + tissue, df ))
              beta <- anovaRes[c("individual", "tissue", "Residuals"),"Sum Sq"]
              pvals <- anovaRes[c("individual", "tissue"),"Pr(>F)"]
              res <- c( beta, pvals )
              res
          }
      }, BPPARAM=MulticoreParam(10))
      varExplained <- do.call(rbind, varExplained)
      colnames(varExplained) <- c("individual", "tissue", "residual", "individualPval", "tissuePval")
      rownames(varExplained) <- rownames(crossCoefs)
      as.data.frame(varExplained)
  }
  
  varExplained1 <- varianceExplainedFunction( crossCoefs2D1 )
  table( p.adjust( varExplained1$tissuePval, method="BH") < 0.1 )
  
  varExplained2 <- varianceExplainedFunction( crossCoefs2D2 )
  varExplained3 <- varianceExplainedFunction( crossCoefs2D3 )
  
  varExplainedJR1 <- varianceExplainedFunction( crossCoefs2DJR1 )
  varExplainedJR2 <- varianceExplainedFunction( crossCoefs2DJR2 )
  varExplainedJR3 <- varianceExplainedFunction( crossCoefs2DJR3 )
  
  
  save( varExplained1, varExplained2, varExplained3, varExplainedJR1, varExplainedJR2, varExplainedJR3,
       file=file.path(path, "objects", "varExplained.RData") )
  
#+END_SRC

#+BEGIN_SRC R
  
  library(DEXSeq)
  library(ggplot2)
  library(RColorBrewer)
  library(genefilter)
  path <- Sys.getenv("gtex")
  
  load( file.path(path, "objects", "dxdObjects.RData") )
  genomicData <- rowRanges( dxd1 )
  rm(dxd1, dxd2, dxd3)
  
  transcriptDb <- loadDb(file.path(path, "objects", "GRCh38.sqlite"))
  
  fiveUTR <- fiveUTRsByTranscript( transcriptDb, use.names=TRUE )
  threeUTR <- threeUTRsByTranscript( transcriptDb, use.names=TRUE )
  coding <- cdsBy(transcriptDb, "tx", use.names=TRUE)
  fiveUTR <- reduce(unlist(fiveUTR))
  threeUTR <- reduce(unlist(threeUTR))
  coding <- reduce(unlist(coding))
  
  fiveUTRNames <- unique(names(genomicData)[queryHits(findOverlaps( genomicData, fiveUTR, type="within"))])
  threeUTRNames <- unique(names(genomicData)[queryHits(findOverlaps( genomicData, threeUTR, type="within"))])
  codingNames <- unique(names(genomicData)[queryHits(findOverlaps( genomicData, coding, type="within"))])
  
  fiveUTRNamesOnly <- Reduce(setdiff,
                             list(fiveUTRNames, codingNames, threeUTRNames))
  threeUTRNamesOnly <- Reduce(setdiff,
                              list(threeUTRNames, codingNames, fiveUTRNames))
  codingNamesOnly <- Reduce( setdiff,
                            list( codingNames, fiveUTRNames, threeUTRNames) )
  
  class <- c(rep("5' UTR", length.out=length( fiveUTRNamesOnly) ),
      rep("coding", length.out=length( codingNames ) ),
      rep("3' UTR", length.out=length( threeUTRNamesOnly) ) )
  names(class) <- c(fiveUTRNamesOnly, codingNames, threeUTRNamesOnly )
  
   
  load(file.path(path, "objects", "varExplained.RData"))
  
  prepareForVarPlot <- function( varExplained, lab=""){
      varExplained <- varExplained[rownames(varExplained) %in% names(class),]
      varExplained <- as.data.frame( varExplained / rowSums( varExplained ) )
      varExplained$class <- class[rownames(varExplained)]
      varExplained$dataset <- lab
      varExplained
  }
  
  prepareForVarPlot( head( varExplained1, 100 ), lab="camara" )
  
  varExplained1 <- prepareForVarPlot( varExplained1, "REUC1" )
  varExplained2 <- prepareForVarPlot( varExplained2, "REUC2" )
  varExplained3 <- prepareForVarPlot( varExplained3, "REUC3" )
  varExplainedJR1 <- prepareForVarPlot( varExplainedJR1, "PSI1" )
  varExplainedJR2 <- prepareForVarPlot( varExplainedJR2, "PSI2" )
  varExplainedJR3 <- prepareForVarPlot( varExplainedJR3, "PSI3" )
  
  varExplainedAll <- data.frame(do.call(rbind, list(varExplained1, varExplained2, varExplained3,
                                                    varExplainedJR1, varExplainedJR2,
                                                    varExplainedJR3) ) )
  
  varExplainedAll$class <- factor( varExplainedAll$class, levels=c("5' UTR", "coding", "3' UTR") )
  
  theme_set(theme_bw(16))
  
  head( varExplainedAll )
  
  ggplot( varExplainedAll, aes(class, tissue)) + geom_violin(aes(fill=class)) +
      geom_boxplot(aes(fill=class), width=.4) + facet_wrap(~dataset)
  
  ggplot( varExplainedAll, aes(class, residual)) + geom_violin(aes(fill=class)) +
      geom_boxplot(aes(fill=class), width=.4) + facet_wrap(~subset)
  
  ggplot( varExplainedAll, aes(class, individual)) + geom_violin(aes(fill=class)) +
      geom_boxplot(aes(fill=class), width=.4) + facet_wrap(~subset)
  
  ggplot( varExplainedAll, aes(tissue, fill=class, color=class)) + stat_ecdf(lwd=1.3) +
      facet_wrap(~dataset) + ylab("cummulative density") +
      xlab("variance explained by tissue (%)")
  
  ggplot( varExplainedAll, aes(residual, fill=class, color=class)) + stat_ecdf(lwd=1.3) +
      facet_grid(~dataset) + ylab("cummulative density") + xlab("residual variance (%)")
  
  ggplot( varExplainedAll, aes(individual, fill=class, color=class)) + stat_ecdf(lwd=1.3) +
      facet_grid(~dataset) + ylab("cummulative density") + xlab("residual variance (%)")
  
#+END_SRC

** Testing 

#+BEGIN_SRC R

  library(DEXSeq)
  library(ggplot2)
  library(RColorBrewer)
  library(genefilter)
  library(statmod)
  path <- Sys.getenv("gtex")

  load( file.path(path, "objects", "dxdObjects.RData") )
  load( file.path(path, "objects", "testableVector.RData") )
  load( file.path(path, "objects", "rawTestDisps1.RData"))
  load( file.path(path, "objects", "rawTestDisps2.RData"))
  load( file.path(path, "objects", "rawTestDisps3.RData"))

  testForDEUParallel <- function( dxd, null, full, rawDisps, testableVector, bjp){
      modelFrame <- as.data.frame(colData(dxd))
      countMatrix <- counts(dxd)
      mmNull <- DEXSeq:::rmDepCols(model.matrix(null, modelFrame))
      mmFull <- DEXSeq:::rmDepCols(model.matrix(full, modelFrame))
  #    testable2 <- rowMeans( t( t(countMatrix) / modelFrame$sizeFactor )[,modelFrame$exon=="this"] ) > 10
      testableVector <- testableVector # & testable2
      toSplit <- sort(rep(seq_len(bpnworkers(bjp)), length.out=nrow(countMatrix)))
      splitMat <- split( as.data.frame(countMatrix), toSplit )
      cat(sprintf("testing using %s cores\n", bpnworkers(bjp) ) )
      pvalAll <- bplapply( splitMat, function(mat, modelFrameZ, rawDispsZ, mmNullZ, mmFullZ,
                                   testableVectorZ){
          library(statmod)
          pvals <- sapply( rownames(mat), function(ex){
              cat(sprintf("testing %s\n", ex))
              x <- which(rownames(mat) %in% ex)
              xi <- which(rownames(rawDispsZ) %in% ex)
              if( !testableVectorZ[xi] ){
                  return(NA)
              }
              disps <- ifelse( modelFrameZ$exon=="this",
                              rawDispsZ[xi,"dispThis"],
                              rawDispsZ[xi,"dispOthers"])
              counts <- as.numeric(mat[x,])
              sf <- modelFrameZ$sizeFactor
              options(warn=2)
              fitNull <- try( glmnb.fit(mmNullZ, counts, dispersion=disps, offset=sf) )
              fitFull <- try( glmnb.fit(mmFullZ, counts, dispersion=disps, offset=sf) )
              options(warn=0)
              if( inherits(fitNull, "try-error") | inherits( fitFull, "try-error") ){
                  return(NA)
              }
              pval <- 1 - pchisq( deviance(fitNull) - deviance(fitFull),
                                 df=ncol(mmFullZ) - ncol(mmNullZ))
              return(pval)
          } )
          names(pvals) <- rownames(mat)
          pvals
      }, modelFrameZ=modelFrame,
               rawDispsZ=rawDisps,
               mmNullZ=mmNull,
               mmFullZ=mmFull,
               testableVectorZ=testableVector,
               BPPARAM=bjp )
      unlist(pvalAll)
  }

  nCores=200
  source(file.path(path, "org", "useCluster.R"))

  #summary( rawTestDisps1 )
  #table( rawTestDisps1 > 10 )
  rawTestDisps1 <- data.frame( dispThis=rawTestDisps1,
                              dispOthers=rawTestDisps1 )
  rownames(rawTestDisps1) <- gsub(".*(ENS.*)", "\\1", rownames( rawTestDisps1 ))

  pvalsTissues1 <- testForDEUParallel(dxd1,
                     ~sample + exon + sex:exon + individual:exon,
                     ~sample + exon + sex:exon + individual:exon + tissue:exon,
                               rawTestDisps1,
                               testableVector,
                               bjp)

  names(pvalsTissues1) <- gsub(".*(ENS.*)", "\\1", names(pvalsTissues1))

  pvalsIndividuals1 <- testForDEUParallel(dxd1,
                     ~sample + exon + sex:exon + tissue:exon,
                     ~sample + exon + sex:exon + tissue:exon + individual:exon,
                               rawTestDisps1,
                               testableVector,
                               bjp)

  names(pvalsIndividuals1) <- gsub(".*(ENS.*)", "\\1", names(pvalsIndividuals1))

  save( pvalsTissues1, pvalsIndividuals1, file=file.path(path, "objects", "pvals1.RData") )

  rawTestDisps2 <- data.frame( dispThis=rawTestDisps2,
                              dispOthers=rawTestDisps2 )
  rownames(rawTestDisps2) <- gsub(".*(ENS.*)", "\\1", rownames( rawTestDisps2 ))

  pvalsTissues2 <- testForDEUParallel(dxd2,
                     ~sample + exon + sex:exon + individual:exon,
                     ~sample + exon + sex:exon + individual:exon + tissue:exon,
                               rawTestDisps2,
                               testableVector,
                               bjp)

  names(pvalsTissues2) <- gsub(".*(ENS.*)", "\\1", names(pvalsTissues2))

  pvalsIndividuals2 <- testForDEUParallel(dxd2,
                     ~sample + exon + sex:exon + tissue:exon,
                     ~sample + exon + sex:exon + tissue:exon + individual:exon,
                               rawTestDisps2,
                               testableVector,
                               bjp)

  names(pvalsIndividuals2) <- gsub(".*(ENS.*)", "\\1", names(pvalsIndividuals2))

  save( pvalsTissues2, pvalsIndividuals2, file=file.path(path, "objects", "pvals2.RData") )

  newTestDisps3 <- data.frame( dispThis=rawTestDisps3,
                              dispOthers=rawTestDisps3 )

  rownames(newTestDisps3) <- gsub(".*(ENS.*)", "\\1", rownames( newTestDisps3 ))


  pvalsTissues3 <- testForDEUParallel(dxd3,
                     ~sample + exon + sex:exon + individual:exon,
                     ~sample + exon + sex:exon + individual:exon + tissue:exon,
                               newTestDisps3,
                               testableVector,
                               bjp)

  names(pvalsTissues3) <- gsub(".*(ENS.*)", "\\1", names(pvalsTissues3))

  pvalsIndividuals3 <- testForDEUParallel(dxd3,
                     ~sample + exon + sex:exon + tissue:exon,
                     ~sample + exon + sex:exon + tissue:exon + individual:exon,
                               newTestDisps3,
                               testableVector,
                               bjp)

  names(pvalsIndividuals3) <- gsub(".*(ENS.*)", "\\1", names(pvalsIndividuals3))

  save( pvalsTissues3, pvalsIndividuals3, file=file.path(path, "objects", "pvals3.RData") )

#+END_SRC

Get background sets of exons for enrichment analysis

#+BEGIN_SRC R
   
  library(DEXSeq)
  library(MatchIt)
  
  path <- Sys.getenv("gtex")
  
  load(file.path(path, "objects", "dxdObjects.RData") )
  
  load(file.path(path, "objects", "pvals1.RData"))
  load(file.path(path, "objects", "pvals2.RData"))
  load(file.path(path, "objects", "pvals3.RData"))
  
  getBackground <- function( dxd, pvalsTissues ){
      df1 <- data.frame(
          means=rowMeans( featureCounts( dxd, normalized=TRUE) ),
          width=width( rowRanges(dxd) ),
          significant=as.numeric( p.adjust( pvalsTissues, method="BH" ) < 0.1 ) )
      df1 <- df1[!is.na( df1$significant ),]
      set.seed(100)
      toKeep <- sample( rownames(df1)[df1$significant == 1], 5000 )
      df1 <- df1[rownames(df1) %in% toKeep | df1$significant == 0,]
      df1 <- droplevels(df1)
      cat("estimating background\n")
      mm <- matchit( significant ~ means + width, data=df1, method="nearest", distance="mahalanobis")
  #    mm <- matchit( significant ~ means + width, data=df1 )
      mm
  }
  
  
  mm1 <- getBackground( dxd1, pvalsTissues1 )
  mm2 <- getBackground( dxd2, pvalsTissues2 )
  mm3 <- getBackground( dxd3, pvalsTissues3 )
  
  background1 <- mm1$match.matrix[,1]
  background2 <- mm2$match.matrix[,1]
  background3 <- mm3$match.matrix[,1]
  
  save( background1, background2, background3,
       file=file.path( path, "objects", "backgrounds.RData" ) )

#+END_SRC

How many genes are affected, by gene classes

#+BEGIN_SRC R
  
  library(DEXSeq)
  library(MatchIt)
  path <- Sys.getenv("gtex")
  
  load( file.path(path, "objects", "pvals1.RData") )
  load( file.path(path, "objects", "pvals2.RData") )
  load( file.path(path, "objects", "pvals3.RData") )
  load( file.path(path, "objects", "expressionData.RData") )
  load( file.path(path, "objects", "dxdObjects.RData") )
  
  load( file.path(path, "objects", "geneNames.RData" ) )
  load( file.path(path, "objects", "geneBiotype.RData" ) )
  
  houseKeeping <- read.table(file.path(path, "annotation", "HK_genes.txt"), stringsAsFactors=FALSE)$V1
  houseKeeping <- names( geneNames[geneNames %in% houseKeeping] )
  
  getEnrichmentMatrices <- function( pvalsTissues, dxd, exprData ){
      affectedExons <- names( which( p.adjust( pvalsTissues, method="BH" ) < 0.1 ) )
      affectedGenes <- unique( sapply( strsplit( affectedExons, ":" ), "[[", 1 ) )
      exonsPerGene <- table( rowRanges( dxd )$groupID )
      df <- data.frame(
          significant=as.numeric( rownames(exprData) %in% affectedGenes ),
          means=rowMeans(exprData) )
      df <- df[rownames(df) %in% names( exonsPerGene ),]
      stopifnot( all( rownames( df ) == names( exonsPerGene ) ) )
      df$numbOfExons <- as.numeric( exonsPerGene )
      mm <- matchit( significant ~ means + numbOfExons, df,
                distance="mahalanobis", method="nearest" )
      backgroundGenes <- mm$match.matrix[,1]
      affectedNumbers <- table( geneBiotype[names( geneBiotype ) %in% affectedGenes] )
      backgroundNumbers <- table( geneBiotype[names( geneBiotype ) %in% backgroundGenes] )
      dfGenetype <- data.frame( allNumbers=as.numeric( table(geneBiotype) ) )
      rownames(dfGenetype) <- names( table( geneBiotype ) )
      dfGenetype$affectedNumbers <- 0
      dfGenetype$backgroundNumbers <- 0
      dfGenetype[names(affectedNumbers),"affectedNumbers"] <- as.numeric(affectedNumbers)
      dfGenetype[names(backgroundNumbers),"backgroundNumbers"] <- as.numeric(backgroundNumbers)
      mat <- rbind(
          proteinCoding=dfGenetype["protein_coding",c("affectedNumbers", "backgroundNumbers")],
          others=(colSums(dfGenetype) - dfGenetype["protein_coding",])[,c("affectedNumbers", "backgroundNumbers")]
      )
      matBiotypes <- mat
      dfPC <- df[rownames(df) %in% names( geneBiotype[geneBiotype == "protein_coding"] ),]
      mm <- matchit( significant ~ means + numbOfExons, dfPC,
                distance="mahalanobis", method="nearest" )
      backgroundGenesPC <- mm$match.matrix[,1]
      backgroundGenesPC <- backgroundGenesPC[!is.na( backgroundGenesPC )]
      mat <- rbind(
          affectedGenes=table( affectedGenes %in% houseKeeping ),
          background=table( backgroundGenesPC %in% houseKeeping ) )[,2:1]
      colnames( mat ) <- c("housekeeping", "nothousekeeping")
      matHousekeeping <- mat
      list( matBiotype=matBiotypes, matHousekeeping=matHousekeeping,
           backgroundGenes=backgroundGenes, backgroundGenesPC=backgroundGenesPC )
  }
  
  
  mats1 <- getEnrichmentMatrices( pvalsTissues1, dxd1, exprData1 )
  mats2 <- getEnrichmentMatrices( pvalsTissues2, dxd2, exprData2 )
  mats3 <- getEnrichmentMatrices( pvalsTissues3, dxd3, exprData3 )
  
  save( mats1, mats2, mats3, file=file.path( path, "objects", "geneMats.RData") )
  

#+END_SRC

** Exon usage not explained by splicing

*** Variance Explained

#+BEGIN_SRC R
         
  library(DEXSeq)
  library(ggplot2)
  library(RColorBrewer)
  library(genefilter)
  library(statmod)
  library(GGally)
  library(gridExtra)
  library(ggbeeswarm)
  
  path <- Sys.getenv("gtex")
  source( file.path( path, "org", "visualization.R" ) )
    
  load( file.path( path, "objects", "pvals1.RData") )
  load( file.path( path, "objects", "pvals2.RData") )
  load( file.path( path, "objects", "pvals3.RData") )
    
  load( file.path(path, "objects", "backgrounds.RData") )
  load( file.path(path, "objects", "varExplained.RData") )
  load( file.path(path, "objects", "dxdJRObjects.RData") )
  
  load( file.path(path, "objects", "crossCoefs1.RData") )
  load( file.path(path, "objects", "crossCoefsJR1.RData") )
    
  plotVarVar <- function( dxdJR, varExplained, varExplainedJR, pvalsTissues ){
     gamma = .25
     otherExons <- colData(dxdJR)$exon == "others"
     otherMeans <- rowMeans( counts( dxdJR, normalized=TRUE )[,otherExons] )
     enoughCounts <- otherMeans > 0
     tissueSign <- names(which( p.adjust( pvalsTissues, method="BH" ) < 0.1 ))
     sign <- rownames(varExplained) %in% tissueSign 
     dfPlot <- data.frame(
         varExplained=(varExplained$tissue/(log(2)^2))**gamma,
         varExplainedJR=(varExplainedJR$tissue/(log(2)^2))**gamma,
         Junctions=cut( otherMeans, c(0, 2, 5, 10, max(otherMeans) ),
             include.lowest=TRUE ))
     levels(dfPlot$Junctions)[4] <- ">10"
     labs <- seq(0, 1.4, 0.1 )
     dfPlot <- dfPlot[which(sign),]
     theme_set(theme_bw(14))
     pl <- ggplot(dfPlot, aes(varExplained, varExplainedJR, color=Junctions) ) +
         geom_point(alpha=.25, size=.75) + coord_equal() +
         guides(
             colour = guide_legend( title="Exon-exon\njunction\nreads (mean)",
                 override.aes = list(alpha = 1, size=1.3))) +
         ylab("Variance of RSICs\nbetween tissues") +
         xlab("Variance of REUCs\nbetween tissues") +
         scale_x_continuous(breaks=labs,
             label=fancylabels( labs^(1/gamma) ) ) +
         scale_y_continuous(bre
aks= labs,
             label=fancylabels( labs^(1/gamma) ) ) +
         theme(panel.grid.minor = element_blank(),
             panel.grid.major = element_blank(),
             axis.text.x=element_text(angle=45, hjust = 1, vjust=1),
             legend.title=element_text(size=13) )
     pl
  }
    
  fancylabels <- function(l){
      scientific <- l < 0.001 & l > 0
      l[!scientific] <- round(l[!scientific], 3)
      l <- mapply( l, scientific, FUN=function(x, y){ format(x, scientific=y)})
      l <- gsub("e", "10^", gsub( "^(.*)e", "e", l))
      parse(text=l)
  }
    
  pv1 <- plotVarVar( dxd1JR, varExplained1, varExplainedJR1, pvalsTissues1 )
  pv2 <- plotVarVar( dxd2JR, varExplained2, varExplainedJR2, pvalsTissues2 )
  pv3 <- plotVarVar( dxd3JR, varExplained3, varExplainedJR3, pvalsTissues3 )
    
  png(file.path(path, "plots", "varPlot1.png"), res=200, height=4, width=5.4, unit="in")
  print( pv1 )
  dev.off()
  png(file.path(path, "plots", "varPlot2.png"), res=200, height=4, width=5.4, unit="in")
  print( pv2 )
  dev.off()
  png(file.path(path, "plots", "varPlot3.png"), res=200, height=4, width=5.4, unit="in")
  print( pv3 )
  dev.off()
  
  plotR2R2 <- function( dxdJR, varExplained, varExplainedJR, pvalsTissues ){
      gamma = .25
      otherExons <- colData(dxdJR)$exon == "others"
      otherMeans <- rowMeans( counts( dxdJR, normalized=TRUE )[,otherExons] )
      enoughCounts <- otherMeans > 0
      tissueSign <- names(which( p.adjust( pvalsTissues, method="BH" ) < 0.1 ))
      sign <- rownames(varExplained) %in% tissueSign
      dfPlot <- data.frame(
          percentageTissue=varExplained$tissue/rowSums(varExplained),
          percentageTissueJR=varExplainedJR$tissue/rowSums(varExplainedJR),
          Junctions=cut( otherMeans, c(0, 2, 5, 10, max(otherMeans) ),
              include.lowest=TRUE ) )
      levels(dfPlot$Junctions)[4] <- ">10"
      dfPlot <- dfPlot[sign,]
      theme_set(theme_bw(13))
      p3 <- ggplot( dfPlot, aes( percentageTissue, percentageTissueJR, color=Junctions ) ) +
          geom_point( alpha=.25, size=.75 ) +
          xlab(expression(frac("Variance of REUCs between tissues","Total variance of REUCs"))) +
          ylab(expression(frac("Variance of RISCs between tissues","Total variance of RISCs"))) +
              coord_fixed(ratio=1) +
          guides(colour = guide_legend(title="Exon-exon\njunction\nreads (mean)",
                     override.aes = list(alpha = 1, size=1.5) ) ) +
              theme(panel.grid.minor = element_blank(),
                  panel.grid.major = element_blank(),
                  axis.text.x=element_text(angle=45, hjust = 1, vjust=1),
                  legend.title=element_text(size=13))
      p3
  }
  
  plr1 <- plotR2R2( dxd1JR, varExplained1, varExplainedJR1, pvalsTissues1 )
  plr2 <- plotR2R2( dxd2JR, varExplained2, varExplainedJR2, pvalsTissues2 )
  plr3 <- plotR2R2( dxd3JR, varExplained3, varExplainedJR3, pvalsTissues3 )
  
  png(file.path(path, "plots", "plotR2R1.png"), res=200, height=4, width=5.4, unit="in")
  print(plr1)
  dev.off()
  png(file.path(path, "plots", "plotR2R2.png"), res=200, height=4, width=5.4, unit="in")
  print(plr2)
  dev.off()
  png(file.path(path, "plots", "plotR2R3.png"), res=200, height=4, width=5.4, unit="in")
  print(plr3)
  dev.off()
   
  a <- rownames(plr1$data)[which( plr1$data$percentageTissue > .9 & plr1$data$percentageTissueJR < .1 )][1]
  #x <- "ENSG00000164972:E017"
  png(file.path(path, "plots", sprintf("beeswarm_%s.png", a)), res=200, height=4.5, width=5, unit="in")
  print(plotCoefBeeswarm( a, crossCoefs1, crossCoefsJR1 ))
  dev.off()
  b <- rownames(plr1$data)[which( plr1$data$percentageTissue > .9 & plr1$data$percentageTissueJR > .9 )][1]
  png(file.path(path, "plots", sprintf("beeswarm_%s.png", b)), res=200, height=4.5, width=5, unit="in")
  print(plotCoefBeeswarm( b, crossCoefs1, crossCoefsJR1 ))
  dev.off()
  plr1Points <- plr1 +
      geom_point( data=NULL, x=plr1$data[a,"percentageTissue"], y=plr1$data[a,"percentageTissueJR"], color="black", shape = "O",size = 2, stroke = 3.5,alpha =.8) +
      geom_point( data=NULL, x=plr1$data[b,"percentageTissue"], y=plr1$data[b,"percentageTissueJR"], color="black", shape = "O",size = 2, stroke = 3.5,alpha =.8)
  png(file.path(path, "plots", "plotR2R1Selected.png"), res=200, height=4, width=5.4, unit="in")
  print( plr1Points )
  dev.off()
  
  whPlot <- function( dxdJR, varExplained, varExplainedJR, pvalsTissues ){
      gamma = .25
      otherExons <- colData(dxdJR)$exon == "others"
      otherMeans <- rowMeans( counts( dxdJR, normalized=TRUE )[,otherExons] )
      enoughCounts <- otherMeans > 0
      tissueSign <- names(which( p.adjust( pvalsTissues, method="BH" ) < 0.1 ))
      sign <- rownames(varExplained) %in% tissueSign
      dfPlot <- data.frame(
          allVariance=(rowSums(varExplained)/(log(2)^2))**gamma,
          allVarianceJR=(rowSums(varExplainedJR)/(log(2)^2))**gamma,
          percentageTissue=varExplained$tissue/rowSums(varExplained),
          percentageTissueJR=varExplainedJR$tissue/rowSums(varExplainedJR),
          Junctions=cut( otherMeans, c(0, 2, 5, 10, max(otherMeans) ),
              include.lowest=TRUE ))
    #    dfPlot <- dfPlot[rownames( dfPlot ) %in% tissueSign,]
      levels(dfPlot$Junctions)[4] <- ">10"
      labs <- seq(0, 1, 0.1 )
      theme_set(theme_bw(15))
      p1 <- ggplot(dfPlot, aes(allVariance, allVarianceJR, color=Junctions) ) +
          geom_point(alpha=.25, size=.75) + coord_equal() +
          guides(colour = guide_legend(override.aes = list(alpha = 1, size=1.5))) +
          ylab("Variance of RSICs\n") +
          xlab("Variance of REUCs\n") +
          scale_x_continuous(breaks=labs,
              label=fancylabels( labs^(1/gamma) ) ) +
          scale_y_continuous(breaks= labs,
              label=fancylabels( labs^(1/gamma) ) ) +
          guides(colour = guide_legend(override.aes = list(alpha = 1, size=1.5))) +
          theme(panel.grid.minor = element_blank(), 
              panel.grid.major = element_blank(),
              axis.text.x=element_text(angle=45, hjust = 1, vjust=1) )
      p2 <- ggplot( dfPlot, aes( allVariance, percentageTissue, color=Junctions ) ) +
          geom_point( alpha=.25, size=.75 ) +
          xlab("Variance of REUCs\n") +
          ylab("Variance of REUCs\nbetween tissues") +
          scale_x_continuous(breaks=labs, label=fancylabels( labs^(1/gamma) ) ) +
          guides(colour = guide_legend(override.aes = list(alpha = 1, size=1.5))) +
              theme(panel.grid.minor = element_blank(),
                  panel.grid.major = element_blank(),
                  axis.text.x=element_text(angle=45, hjust = 1, vjust=1) )
      p3 <- ggplot( dfPlot, aes( percentageTissue, percentageTissueJR, color=Junctions ) ) +
          geom_point( alpha=.25, size=.75 ) +
          xlab("Fraction of REUC variance\nexplained by tissue") +
          ylab("Fraction of RSIC variance\nexplained by tissue") +
          guides(colour = guide_legend(override.aes = list(alpha = 1, size=1.5) , byrow=TRUE, nrow=1)) +
              theme(panel.grid.minor = element_blank(),
                  panel.grid.major = element_blank(),
                  axis.text.x=element_text(angle=45, hjust = 1, vjust=1) )
      p4 <- ggplot( dfPlot, aes( allVarianceJR, percentageTissueJR, color=Junctions ) ) +
          geom_point( alpha=.25, size=.75 ) +
          xlab("Variance of RSIC\n") +
          ylab("Fraction of RSIC variance\nexplained by tissue") +
          scale_x_continuous(breaks=labs, label=fancylabels( labs^(1/gamma) ) ) +
          guides(colour = guide_legend(override.aes = list(alpha = 1, size=1.5) , byrow=TRUE, nrow=1)) +
              theme(panel.grid.minor = element_blank(),
                  panel.grid.major = element_blank(),
                  axis.text.x=element_text(angle=45, hjust = 1, vjust=1) )
      g_legend<-function(a.gplot){
          tmp <- ggplot_gtable(ggplot_build(a.gplot))
          leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
          legend <- tmp$grobs[[leg]]
          return(legend)}
      legend <-  g_legend( p4 )
      grid.arrange( legend,
          arrangeGrob( p1 + theme(legend.position="none"),
                  p2 + theme(legend.position="none"),
                  p3 + theme(legend.position="none"),
                  p4 + theme(legend.position="none"), ncol=2), heights=c(1, 20) )
  }
    
  png( file.path(path, "plots", "varPlotsPer1.png"), height=10, width=10, res=200, unit="in")
  print( whPlot( dxd1JR, varExplained1, varExplainedJR1, pvalsTissues1 ) )
  dev.off()
  png( file.path(path, "plots", "varPlotsPer2.png"), height=10, width=10, res=200, unit="in")
  print( whPlot( dxd2JR, varExplained2, varExplainedJR2, pvalsTissues2 ) )
  dev.off()
  png( file.path(path, "plots", "varPlotsPer3.png"), height=10, width=10, res=200, unit="in")
  print( whPlot( dxd1JR, varExplained1, varExplainedJR1, pvalsTissues1 ) )
  dev.off()
  
#+END_SRC

*** Barplot with backgrounds

#+BEGIN_SRC R

  library(DEXSeq)
  library(ggplot2)
  library(RColorBrewer)
  library(genefilter)
  library(statmod)
  path <- Sys.getenv("gtex")
  
  load( file.path( path, "objects", "pvals1.RData") )
  load( file.path( path, "objects", "pvals2.RData") )
  load( file.path( path, "objects", "pvals3.RData") )
  
  load( file.path(path, "objects", "backgrounds.RData") )
  load( file.path(path, "objects", "varExplained.RData") )
  load( file.path(path, "objects", "dxdJRObjects.RData") )


  varPlot <- function( dxdJR, pvalsTissues ){
      sign <- p.adjust(pvalsTissues, method="BH") < 0.1
      otherExons <- colData(dxdJR)$exon == "others"
      otherMeans <- rowMeans( counts( dxdJR, normalized=TRUE )[,otherExons] )
      numExons <- table( cut( otherMeans[sign], c(0, 2, 5, 10, max(otherMeans)), include.lowest=TRUE ) )
      df <- data.frame(numExons)
      colnames( df ) <- c("Junctions", "Number")
      levels(df$Junctions)[4] <- ">10"
      theme_set(theme_bw(15))
      pl <- ggplot(df, aes(Junctions, Number, fill=Junctions)) + geom_bar(stat="identity") +
          ylab("Number of exons") + xlab("Mean number of junctions")
      pl
  }
  
  bp1 <- varPlot( dxd1JR, pvalsTissues1 )
  bp2 <- varPlot( dxd2JR, pvalsTissues2 )
  bp3 <- varPlot( dxd3JR, pvalsTissues3 )
  
  png( file.path( path, "plots", "barPlot1.png" ), res=200, height=3.5, width=4.5, unit="in")
  print( bp1 )
  dev.off()
  png( file.path( path, "plots", "barPlot2.png" ), res=200, height=3.5, width=4.5, unit="in")
  print( bp2 )
  dev.off()
  png( file.path( path, "plots", "barPlot3.png" ), res=200, height=3.5, width=4.5, unit="in")
  print( bp3 )
  dev.off()
  
  
  varPlotWithBackground <- function( dxdJR, pvalsTissues, background ){
      sign <- p.adjust(pvalsTissues, method="BH") < 0.1
      otherExons <- colData(dxdJR)$exon == "others"
      otherMeans <- rowMeans( counts( dxdJR, normalized=TRUE )[,otherExons] )
      numExons <- table( cut( otherMeans[sign], c(0, 2, 5, 10, max(otherMeans)), include.lowest=TRUE ) )
      fracExons <- numExons / sum(numExons)
      back <- names(pvalsTissues) %in% background
      backExons <- table( cut( otherMeans[back], c(0, 2, 5, 10, max(otherMeans)), include.lowest=TRUE ) )
      fracBackExons <- backExons / sum(backExons)
      dfPlot <- rbind( data.frame(fracExons, set="DEU"), data.frame( fracBackExons, set="background" ) )
      colnames(dfPlot)[1] <- "Junctions"
      levels(dfPlot$Junctions)[4] <- ">10"
      theme_set(theme_bw(15)) 
      pl <- ggplot( dfPlot, aes(set, Freq, fill=Junctions) ) + geom_bar(stat="identity") +
          ylab("Fraction of exons") + xlab("")
      pl
  }
  
  bpb1 <- varPlotWithBackground( dxd1JR, pvalsTissues1, background1 )
  bpb2 <- varPlotWithBackground( dxd2JR, pvalsTissues2, background2 )
  bpb3 <- varPlotWithBackground( dxd3JR, pvalsTissues3, background3 )
  
  png( file.path( path, "plots", "barPlotWB1.png" ), res=200, height=3.5, width=4.5, unit="in")
  print( bpb1 )
  dev.off()
  png( file.path( path, "plots", "barPlotWB2.png" ), res=200, height=3.5, width=4.5, unit="in")
  print( bpb2 )
  dev.off()
  png( file.path( path, "plots", "barPlotWB3.png" ), res=200, height=3.5, width=4.5, unit="in")
  print( bpb3 )
  dev.off()
  
  getNumbersPerGene <- function( pvalsTissues, dxdJR ){
      affectedExons <- p.adjust( pvalsTissues, method="BH" ) < 0.1
      otherExons <- colData( dxdJR )$exon == "others"
      geneIDVector <- rowRanges(dxdJR)$groupID
      otherMeans <- rowMeans( counts(dxdJR, normalized=TRUE)[,otherExons] )
      enoughCounts <- otherMeans > 2
      geneNames <- unique( sapply( strsplit( names( which( affectedExons ) ), ":" ), "[[", 1 ) )
      genesAffectedIndex <- geneIDVector %in% geneNames
      df <- data.frame(
          totalExonBins=
              tapply( genesAffectedIndex[genesAffectedIndex],
                     geneIDVector[genesAffectedIndex], sum ),
          exonsAffected=
              tapply( affectedExons[genesAffectedIndex],
                     geneIDVector[genesAffectedIndex], sum, na.rm=TRUE),
          explainedSplicing=tapply( (affectedExons & enoughCounts)[genesAffectedIndex],
              geneIDVector[genesAffectedIndex], sum, na.rm=TRUE) )
      df
  }
  
  numbPerGene1 <- getNumbersPerGene( pvalsTissues1, dxd1JR )
  numbPerGene2 <- getNumbersPerGene( pvalsTissues2, dxd2JR )
  numbPerGene3 <- getNumbersPerGene( pvalsTissues3, dxd3JR )
   
  allSplicing <- sum( numbPerGene2$exonsAffected == numbPerGene2$explainedSplicing )
  allNotSplicing <- sum( numbPerGene2$explainedSplicing == 0 )
  both <- nrow(numbPerGene2) - allSplicing - allNotSplicing
  ( c( allSplicing, allNotSplicing, both ) )
  
#+END_SRC

*** Correlations

#+BEGIN_SRC R
  
  library(DEXSeq)
  library(ggplot2)
  library(RColorBrewer)
  library(genefilter)
  library(statmod)
  library(lsa)
  
  path <- Sys.getenv("gtex")
  
  load( file.path( path, "objects", "dxdJRObjects.RData" ) )
  
  load( file.path( path, "objects", "crossCoefs1.RData" ) )
  load( file.path( path, "objects", "crossCoefsJR1.RData" ) )
  load( file.path( path, "objects", "pvals1.RData") )
  
  load( file.path( path, "objects", "crossCoefs2.RData" ) )
  load( file.path( path, "objects", "crossCoefsJR2.RData" ) )
  load( file.path( path, "objects", "pvals2.RData") )
  
  load( file.path( path, "objects", "crossCoefs3.RData" ) )
  load( file.path( path, "objects", "crossCoefsJR3.RData" ) )
  load( file.path( path, "objects", "pvals3.RData") )
  
  plotCorDensities <- function(dxdJR, crossCoefs, crossCoefsJR, pvalsTissues){ 
      otherExons <- colData(dxdJR)$exon == "others"
      otherMeans <- rowMeans( counts(dxdJR, normalized=TRUE)[,otherExons] )
      allCors <- sapply( seq_len( dim(crossCoefs)[1]), function(x){
          cor( as.vector( crossCoefs[x,,] ), as.vector( crossCoefsJR[x,,] ),
              method="pearson")
      })
      significant <-  p.adjust( pvalsTissues, method="BH" ) < 0.1 
      dfHist <- data.frame(
          correlation=allCors,
          Junctions=cut( otherMeans, c(0, 2, 5, 10, max(otherMeans)),
              include.lowest=TRUE) )
      rownames(dfHist) <- dimnames(crossCoefs)[["exon"]]
      dfHist <- dfHist[which(significant),]
      levels( dfHist$Junctions )[4] <- ">10"
      theme_set(theme_bw(15))
      gp <- ggplot(dfHist, aes(correlation, fill = Junctions, colour = Junctions)) +
          geom_density(alpha = 0.1, lwd=1.2) + xlim(-1, 1) +
          xlab("Pearson correlation between\nREUCs and RISCs") + ylab("Density") +
          guides(
               colour = guide_legend( title="Exon-exon\njunction\nreads (mean)"),
               fill = FALSE ) +
          theme(panel.grid.minor = element_blank(),
              panel.grid.major = element_blank(),
              legend.title=element_text(size=13))
      gp
  }
  
  
  p1 <- plotCorDensities( dxd1JR, crossCoefs1, crossCoefsJR1, pvalsTissues1 )
  p2 <- plotCorDensities( dxd2JR, crossCoefs2, crossCoefsJR2, pvalsTissues2 )
  p3 <- plotCorDensities( dxd3JR, crossCoefs3, crossCoefsJR3, pvalsTissues3 )
  
  png( file.path(path, "plots", "cor_RSI_REUC1.png"), height=4, width=5.5,
      res=200, units="in")
  print( p1 )
  dev.off()
  png( file.path(path, "plots", "cor_RSI_REUC2.png"), height=4, width=5.5,
      res=200, units="in")
  print( p2 )
  dev.off()
  png( file.path(path, "plots", "cor_RSI_REUC3.png"), height=4, width=5.5,
      res=200, units="in")
  print( p3 )
  dev.off()
  
#+END_SRC

*** Scatterplots included/excluded

#+BEGIN_SRC R
  
  library(DEXSeq)
  library(ggplot2)
  
  path <- Sys.getenv("gtex")
  load( file.path( path, "objects", "dxdJRObjects.RData" ) )
  load( file.path( path, "objects", "pvals1.RData" ) )
  load( file.path( path, "objects", "pvals2.RData" ) )
  load( file.path( path, "objects", "pvals3.RData" ) )
  
  
  plotConsAlt <- function( pvalsTissues, dxdJR ){
      affectedExons <- names(which( p.adjust( pvalsTissues, method="BH" ) < 0.1 ))
      countMatrix <- counts( dxdJR, normalized=TRUE )
      thisExons <- colData( dxdJR )$exon == "this"
      spIndex <- split(seq_len(ncol(countMatrix[,thisExons])),
                   colData(dxdJR)$tissue[thisExons])
      meansConstitutive <- sapply( spIndex, function(x){
          rowMeans( countMatrix[,thisExons][,x] )
      })
      spIndex <- split(seq_len(ncol(countMatrix[,!thisExons])),
                   colData(dxdJR)$tissue[!thisExons])
      meansAlternative <- sapply( spIndex, function(x){
          rowMeans( countMatrix[,!thisExons][,x] )
      })
      dfPlot <-
          data.frame(
              constitutive=log2( rowMeans( meansConstitutive[affectedExons,]) + 1),
              alternative=log2( rowMeans( meansAlternative[affectedExons,] + 1) ) )         
      theme_set(theme_bw(14))
      plotTissue <-
          ggplot( dfPlot, aes( constitutive, alternative) ) +
              geom_hex(colour="black", bins=90) +
              xlab("Mean of exon counts") +
              ylab("Mean of junction-junction read counts") +
              scale_fill_gradient(name = "Number of\nexons", trans = "log", 
                        breaks = 10^(0:2))
      plotTissue
  }
  
  plotTissue1 <- plotConsAlt( pvalsTissues1, dxd1JR )
  plotTissue2 <- plotConsAlt( pvalsTissues2, dxd2JR )
  plotTissue3 <- plotConsAlt( pvalsTissues3, dxd3JR )
  
  png( file.path( path, "plots", "hexbin_tissue1.png" ),
      height=3.5, width=6, unit="in", res=200)
  print( plotTissue1 )
  dev.off()
  png( file.path( path, "plots", "hexbin_tissue2.png" ),
      height=3.5, width=6, unit="in", res=200)
  print( plotTissue2 )
  dev.off()
  png( file.path( path, "plots", "hexbin_tissue3.png" ),
      height=3.5, width=6, unit="in", res=200)
  print( plotTissue3 )
  dev.off()
  
#+END_SRC

*** Heatmap examples

#+BEGIN_SRC R
  
  library(DEXSeq)
  library(ggplot2)
  library(RColorBrewer)
  library(genefilter)
  library(statmod)
  library(lsa)
  
  path <- Sys.getenv("gtex")
  
  load( file.path( path, "objects", "dxdJRObjects.RData" ) )
  source( file.path( path, "org", "visualization.R" ) )
  
  load( file.path( path, "objects", "dxdObjects.RData") )
  load( file.path( path, "objects", "crossCoefs1.RData") )
  load( file.path( path, "objects", "crossCoefsJR1.RData") )
  load( file.path( path, "objects", "pvals1.RData") )  
  
    ## nice example
  plotGeneREUCs( crossCoefs1, "ENSG00000198947" )
  
  x11()
  plotGeneREUCs( crossCoefsJR1, "ENSG00000007237" )
  
  x11()
  plotTranscripts(dxd1, "ENSG00000007237", scoreVec=ifelse( rownames(dxd2) %in% tissueSign, 0, 10 ), transcriptDb=transcriptDb)
  
  plotGeneREUCs( crossCoefs1, "ENSG00000172995" )


plotGeneREUCs( crossCoefs1, "ENSG00000186868" )
#+END_SRC

** How often alternative splicing affects coding regions

#+BEGIN_SRC R
  
  library(DEXSeq)
  library(ggplot2)
  library(RColorBrewer)
  library(genefilter)
  library(statmod)
  path <- Sys.getenv("gtex")
  
  load( file.path( path, "objects", "pvals1.RData" ) )
  load( file.path( path, "objects", "pvals2.RData" ) )
  load( file.path( path, "objects", "pvals3.RData" ) )
  
  load( file.path( path, "objects", "apris.RData" ) )
  load( file.path( path, "objects", "geneBiotype.RData") )
  #geneBiotype
  load( file.path( path, "objects", "backgrounds.RData" ) )
  load( file.path( path, "objects", "dxdJRObjects.RData" ) )
  load( file.path( path, "objects", "dxdObjects.RData" ) )
  
  
  genomicData <- rowRanges( dxd1JR )
  
  transcriptDb <- loadDb( file.path( path, "objects", "GRCh38.sqlite" ) )
  cdsByTranscript <- cdsBy( transcriptDb, "tx", use.names=TRUE)
  
  threeUTRs <- reduce( unlist( threeUTRsByTranscript( transcriptDb ) ) )
  fiveUTRs <- reduce( unlist( fiveUTRsByTranscript( transcriptDb ) ) )
  
  overUTRs <- findOverlaps( threeUTRs, fiveUTRs )
  threeUTRs <- threeUTRs[-queryHits(overUTRs)]
  fiveUTRs <- fiveUTRs[-queryHits(overUTRs)]
  
  principalIsoforms <- names( aprisInfo[aprisInfo != ""] )
  notPrincipalIsoforms <- names( aprisInfo[aprisInfo == ""] )
  principalRanges <- reduce( unlist( cdsByTranscript[principalIsoforms] ) )
  notPrincipalRanges <- reduce( unlist( cdsByTranscript[names(cdsByTranscript) %in% notPrincipalIsoforms] ) )
  allCodingRanges <- reduce( unlist( cdsByTranscript ) )
  notPrincipalRanges <- setdiff( notPrincipalRanges, principalRanges )
  proteinCoding <- names( geneBiotype[geneBiotype %in% "protein_coding"] )
  
  calculateCodingNumbers <- function( exons ){
      exons <- exons[sapply( strsplit( exons, ":" ), "[[", 1 ) %in% proteinCoding]
  #    exons
      totalExons <- length(exons)
      pHits <- unique( queryHits( findOverlaps( genomicData[exons,], principalRanges,
                                               type="any") ) )
      npHits <- unique( queryHits( findOverlaps( genomicData[exons,], notPrincipalRanges,
                                               type="any")) )
      exons <- exons[!exons %in% exons[unique(c(pHits, npHits))]]
  #    utr3 <- unique( queryHits( findOverlaps( genomicData[exons,], threeUTRs, type="within") ) )
  #    utr5 <- unique( queryHits( findOverlaps( genomicData[exons,], fiveUTRs, type="within") ) )
  #    restExons <- totalExons - length(pHits) -  length( npHits ) - length( utr3 ) - length( utr5 )
      round( 100* c( principalCodingRanges=length( pHits ), otherCodingRanges=length( npHits ),
                    untranslated=totalExons-length(pHits)-length(npHits) ) / totalExons, 2)
  }
  
  getCodingProportionsPlot <- function( pvalsTissues, dxdJR, background ){
      sign <- p.adjust( pvalsTissues, method="BH" ) < 0.1
      otherCols <- colData(dxdJR)$exon == "others"
      enoughCounts <- rowMeans( counts(dxdJR, normalized=TRUE)[,otherCols] ) > 10
      confidentSplicing <- enoughCounts & sign
      confidentSplicing <- names( which( confidentSplicing ) )
      notSplicing <- (!enoughCounts) & sign
      notSplicing <- names(which( notSplicing ))
  #    sum( calculateCodingNumbers( background ) )
      df <- data.frame(
          percentages=c( calculateCodingNumbers( confidentSplicing ),
              calculateCodingNumbers( notSplicing ),
              calculateCodingNumbers( background )),
          coding=
             rep(c("Appris coding", "Others coding", "Untranslated"), 3),
          exons=
             rep(c("Splicing DEU", "Other DEU", "Background"), each=3 ) )
      df$exons <- factor( df$exons, levels=c("Splicing DEU", "Other DEU", "Background") )
      theme_set(theme_bw(16))
      pcp <- ggplot(df, aes(exons, percentages, fill=coding)) + geom_bar(stat="identity") +
          theme(axis.text.x=element_text(angle=20, hjust=1), legend.title=element_blank()) + xlab("") +
          ylab("Percentages")
      pcp
  }
  
  pcp1 <- getCodingProportionsPlot( pvalsTissues1, dxd1JR, background1 )
  pcp2 <- getCodingProportionsPlot( pvalsTissues2, dxd2JR, background2 )
  pcp3 <- getCodingProportionsPlot( pvalsTissues3, dxd3JR, background3 )
  
  png( file.path( path, "plots", "codingProportions1.png" ), height=3, width=4.5, res=200, unit="in")
  print( pcp1 )
  dev.off()
  png( file.path( path, "plots", "codingProportions2.png" ), height=3, width=4.5, res=200, unit="in")
  print( pcp2 )
  dev.off()
  png( file.path( path, "plots", "codingProportions3.png" ), height=3, width=4.5, res=200, unit="in")
  print( pcp3 )
  dev.off()
  
  calculateUntranslatedPortions <- function( exons ){
      exons <- exons[sapply( strsplit( exons, ":" ), "[[", 1 ) %in% proteinCoding]
      pHits <- unique( queryHits( findOverlaps( genomicData[exons,], principalRanges,
                                               type="within") ) )
      npHits <- unique( queryHits( findOverlaps( genomicData[exons,], notPrincipalRanges,
                                               type="within")) )
      exons <- exons[!exons %in% exons[unique(c(pHits, npHits))]]
      totalExons <- length(exons)
      utr3 <- unique( queryHits( findOverlaps( genomicData[exons,], threeUTRs) ) )
      utr5 <- unique( queryHits( findOverlaps( genomicData[exons,], fiveUTRs) ) )
  #    strangeCases <- exons[-c(utr3, utr5)]
      round( 100* c( utr3=length( utr3 ), utr5=length(utr5),
                    other=totalExons-length(utr3)-length(utr5)) / totalExons, 2)
  }
  
  calculateCodingNumbersWU <- function(exons){
      exons <- exons[sapply( strsplit( exons, ":" ), "[[", 1 ) %in% proteinCoding]
      totalExons <- length(exons)
      pHits <- unique( queryHits( findOverlaps( genomicData[exons,], principalRanges,
                                               type="any") ) )
      npHits <- unique( queryHits( findOverlaps( genomicData[exons,], notPrincipalRanges,
                                               type="any")) )
      exons <- exons[!exons %in% exons[unique(c(pHits, npHits))]]
      utr3 <- unique( queryHits( findOverlaps( genomicData[exons,], threeUTRs ) ) )
      utr5 <- unique( queryHits( findOverlaps( genomicData[exons,], fiveUTRs ) ) )
      restExons <- totalExons - length(pHits) -  length( npHits ) - length( utr3 ) - length( utr5 )
      round( 100* c( principalCodingRanges=length( pHits ), otherCodingRanges=length( npHits ),
                    utr3=length(utr3), utr5=length(utr5), otherUntranslated=restExons) / totalExons, 2)
  }
  
  
  getCodingProportionsPlotWU <- function( pvalsTissues, dxdJR, background ){
      sign <- p.adjust( pvalsTissues, method="BH" ) < 0.1
      otherCols <- colData(dxdJR)$exon == "others"
      enoughCounts <- rowMeans( counts(dxdJR, normalized=TRUE)[,otherCols] ) > 10
      confidentSplicing <- enoughCounts & sign
      confidentSplicing <- names( which( confidentSplicing ) )
      notSplicing <- (!enoughCounts) & sign
      notSplicing <- names(which( notSplicing ))
   #    sum( calculateCodingNumbers( background ) )
      df <- data.frame(
          percentages=c( calculateCodingNumbersWU( confidentSplicing ),
              calculateCodingNumbersWU( notSplicing ),
              calculateCodingNumbersWU( background )),
          coding=
             rep(c("Appris coding", "Others coding", "Untranslated 3'", "Untranslated 5'",
                   "Other Untranslated"), 3),
          exons=
             rep(c("Splicing DEU", "Other DEU", "Background"), each=5 ) )
      df$exons <- factor( df$exons, levels=c("Splicing DEU", "Other DEU", "Background") )
      theme_set(theme_bw(16))
      pcp <- ggplot(df, aes(exons, percentages, fill=coding)) + geom_bar(stat="identity") +
          theme(axis.text.x=element_text(angle=20, hjust=1), legend.title=element_blank()) + xlab("") +
          ylab("Percentages")
      pcp
  }
  
  pcpu1 <- getCodingProportionsPlotWU( pvalsTissues1, dxd1JR, background1 )
  pcpu2 <- getCodingProportionsPlotWU( pvalsTissues2, dxd2JR, background2 )
  pcpu3 <- getCodingProportionsPlotWU( pvalsTissues3, dxd3JR, background3 )
  
  png( file.path( path, "plots", "codingProportionsUn1.png" ), height=3, width=4.5, res=200, unit="in")
  print( pcpu1 )
  dev.off()
  png( file.path( path, "plots", "codingProportionsUn2.png" ), height=3, width=4.5, res=200, unit="in")
  print( pcpu2 )
  dev.off()
  png( file.path( path, "plots", "codingProportionsUn3.png" ), height=3, width=4.5, res=200, unit="in")
  print( pcpu3 )
  dev.off()
  
  source( file.path( path, "org", "visualization.R" ) )
  transcriptDb <- loadDb( file.path(path, "objects", "GRCh38.sqlite") )
  
  plotTranscripts(dxd1, "ENSG00000215305",
                  scoreVec=ifelse(rownames(dxd1) %in% strangeCases, 0, 10), transcriptDb=transcriptDb)
  
  library(ensembldb)
  listTables(transcriptDb)
  library(GenomicFeatures)
  dxd1
  
  plotTranscripts
  exons <- confidentSplicing

#+END_SRC

** MA-like plots


* Code ready for vignette

** Figure 1

*** Heatmap example

#+BEGIN_SRC R
     
  library(DEXSeq)
  library(matrixStats) 
  library(SummarizedExperiment)
  path <- Sys.getenv("gtex")

  load( file.path(path, "objects", "crossCoefs1.RData") )
  load( file.path(path, "objects", "crossCoefsJR1.RData") )

  opt2 <- "ENSG00000023330"

  source( file.path(path, "org", "visualization.R") )
  library(ggplot2)

  plot <- plotGeneREUCs( crossCoefs1, opt2, exons=c("E004", "E005", "E006"))
  #plot$data$individual

  pdf(file.path(path, "plots", "fig1_heatexample.pdf"), height=2.5, width=4)
  plot + theme(legend.position="top", legend.direction="horizontal",
               axis.title.y=element_blank()) + xlab("Individual") +
         guides(fill = guide_colorbar(barwidth = 7, barheight = 0.35,
                                      title.position="top")) 
  dev.off()

  plot <- plotGeneREUCs( crossCoefsJR1, opt2, exons=c("E004", "E005", "E006"),
                        colLim=0.02 )
  pdf(file.path(path, "plots", "figS1_heatrsic.pdf"), height=1.8, width=5)
  plot + theme(legend.position="right", legend.direction="vertical",
               axis.title.y=element_blank()) + xlab("Individual") +
         guides(fill = guide_colorbar(title="RSIC", barwidth = .5, barheight = 5,
                                      title.position="top")) 
  dev.off()

#+END_SRC


*** Sashimi

#+BEGIN_SRC R

  path <- Sys.getenv("gtex")
  source(file.path(path, "org", "visualization.R") )

  sample1 <- "SRR1322163"
  sample2 <- "SRR1317344"

  individual <- as.character(colData(dxd1)[colData(dxd1)$sample %in% sample1,"individual"][1])

  pdf(file.path(path, "plots", "fig1_sashimi.pdf"), height=3, width=3.5)
  plotSashimi(c(sample1, sample2), nameVec=c("Cerebellum", "Cortex"),
              transcriptDb=transcriptDb, geneTrack=geneTrack,
              transcriptIntrons=c("ENST00000469224", "ENST00000484952"),
              coords=GRanges("3", IRanges(start=52198144, end=52199220)) )
  dev.off()

#+END_SRC

    
** Figure 2

*** Main figures

#+BEGIN_SRC R

  library(scales)
  library(DEXSeq)
  library(matrixStats)
  library(dplyr)
  library(cowplot)
  library(MatchIt)
  library(xtable)

  path <- Sys.getenv("gtex")

  load( file.path( path, "objects", "dxdObjects.RData") )
  load( file.path( path, "objects", "transcriptInfo.RData" ) )
  load( file.path( path, "objects", "geneInfo.RData" ) )

  length( unique( c( unique( as.character( colData(dxd1)$sample ) ),
    unique( as.character( colData(dxd2)$sample ) ),
    unique( as.character( colData(dxd3)$sample ) ) ) ) )

  multiExonicGenes <- ( as.data.frame( mcols(dxd1) ) %>%
      dplyr:::count(groupID) %>%
      filter( n > 1 ) )$groupID

  numberExons <- nrow( filter( as.data.frame(mcols(dxd1)),
         groupID %in% multiExonicGenes ) )

  proteinCodingGenes <- filter( geneInfo,
             gene_biotype == "protein_coding" )$ensembl_gene_id

  length( intersect( multiExonicGenes, proteinCodingGenes ) )

  nrow( filter( as.data.frame( mcols(dxd1 ) ),
         groupID %in% multiExonicGenes,
         groupID %in% proteinCodingGenes ) )


  load( file.path( path, "objects", "dxdJRObjects.RData") )
  load( file.path( path, "objects", "crossCoefs1.RData") )
  load( file.path( path, "objects", "crossCoefs2.RData") )
  load( file.path( path, "objects", "crossCoefs3.RData") )
  load( file.path( path, "objects", "pvals1.RData") )
  load( file.path( path, "objects", "pvals2.RData") )
  load( file.path( path, "objects", "pvals3.RData") )
  load( file.path( path, "objects", "dsdObjects.RData" ) )

  getResultsDF <- function( crossCoefs, dxd, dxdJR, pvals, label="" ){
     tdu <- unlist( lapply(seq_len(dim(crossCoefs)[1]), function(i){
         max(abs( colMedians( (crossCoefs[i,,] - mean(crossCoefs[i,,]) ) / sd(crossCoefs[i,,]) ) ) )
     }) )
     names(tdu) <- dimnames(crossCoefs)[["exon"]]
     rMeans <- rowMeans( counts( dxd, normalized=TRUE )[,colData(dxd)$exon=="this"] )
     oMeans <- rowMeans( counts( dxdJR, normalized=TRUE )[,colData(dxdJR)$exon=="others"] )
     nameList <- strsplit(rownames(dxd), ":")
     df <- data.frame(
         gene=sapply( nameList, "[[", 1),
         exon=sapply( nameList, "[[", 2),
         mean=rMeans,
         esMeans=oMeans,
         tdu=tdu,
         pvals=pvals, label=label)
  #   df$pvals[rMeans < 10] <- NA
     df$padj <- p.adjust( df$pvals, method="BH" )
     df
  }

  resultsDF <-
      rbind(
          getResultsDF( crossCoefs1, dxd1, dxd1JR, pvalsTissues1, label="subsetA" ),
          getResultsDF( crossCoefs2, dxd2, dxd2JR, pvalsTissues2, label="subsetB" ),
          getResultsDF( crossCoefs3, dxd3, dxd3JR, pvalsTissues3, label="subsetC" ) )

  getDEUNumbers <- function( lab, dfFun, returnEx=FALSE ){
      df <- filter( dfFun,
          label %in% lab,
          padj < 0.1,
          tdu > 1 )
      numbOfExons <- nrow(df)
      numbOfGenes <- length(unique(df$gene))
      cat( sprintf("%s has %s DEU exons that correspond to %s genes\n",
          lab, numbOfExons, numbOfGenes) )
      if( returnEx ){
          return( paste(df$gene, df$exon, sep=":") )
      }
  }

  allExons <- unique(c(
      getDEUNumbers( "subsetA", resultsDF, returnEx=TRUE ),
      getDEUNumbers( "subsetB", resultsDF, returnEx=TRUE ),
      getDEUNumbers( "subsetC", resultsDF, returnEx=TRUE )))


  cat( sprintf( "Total number of DEU exons %s\n", length( allExons )) )
  cat( sprintf( "Total number of exons %s\n", numberExons ) )
  cat( sprintf( "Percentage of DEU exons: %s\n",
      round( 100 * length(allExons) / numberExons ) ) )

  effectSizeVsPval <- function( lab, xmax=1.5 ){
      resultsDF$pvalsTrans <- -log10(resultsDF$pvals )
      res <- filter(resultsDF, label==lab, mean > 10)
      res$col <- ifelse( res$padj < 0.1 & res$tdu > 1, "darkred", "#000010" )
      panel1 <- ggplot( res, aes(tdu, pvalsTrans, fill=col, col=col) ) +
  #        geom_point( size=.2, alpha=.1 ) +
          geom_hex(aes(alpha=log(..count..)),fill=c("#000000"), bins=75) +
          xlim(0, xmax) +
  #        scale_fill_manual(values=c("#00000030", "darkred")) +
          scale_colour_manual(values=c("#00000030", "#8b000060")) +
          theme(legend.position="none") +
          geom_vline(xintercept = 1, lwd=1, col="darkred") +
          geom_hline(yintercept =
              min(res$pvalsTrans[which(res$padj < 0.1)], na.rm=TRUE),
              lwd=1, col="darkred" ) +
          xlab("Tissue score") +
          ylab(expression(paste(-log[10], "(p-value)") ) )
      panel1
  }

  fig2PanelA <- effectSizeVsPval( "subsetA" )
  effectSiS1 <- effectSizeVsPval( "subsetB", xmax=2.5)
  effectSiS2 <- effectSizeVsPval( "subsetC", xmax=2)
      
  sup2 <- plot_grid(effectSiS1, effectSiS2, ncol=2, label_size = 16,
                  labels="AUTO")

  save_plot(file.path(path, "plots", "FigSup_effectSizeVsPval.png"),
            sup2, base_height=2.8, base_aspect_ratio=2)

  exonsPerGene <- as.data.frame(mcols(dxd1)) %>% dplyr:::count(groupID)
  colnames(exonsPerGene)[2] <- "exons"

  geneWidth <- tapply(width(SummarizedExperiment::rowRanges(dxd1)),
                      groupIDs(dxd1), sum )

  stopifnot( names( geneWidth ) == exonsPerGene$groupID )
  exonsPerGene$geneWidth <- as.numeric( geneWidth )

  addNumDeu <- function( exonsPerGene, num ){
      subset <- paste0( "subset", LETTERS[num] )
      colName <- paste0( "deuExons", LETTERS[num] )
      colName2 <- paste0("affectedBp", LETTERS[num])
      deuEx <- getDEUNumbers( subset, resultsDF, returnEx=TRUE )
      deuExGn <- sapply( strsplit( deuEx, ":" ), "[[", 1 )
      affectedWidth <- width( SummarizedExperiment::rowRanges( dxd1 )[deuEx] )
      affectedWidth <- tapply( affectedWidth, deuExGn, sum )
      deuPerGene <- table( deuExGn )
      exonsPerGene[[colName]] <- 0
      exonsPerGene[[colName]][match( names(deuPerGene), exonsPerGene$groupID )] <-
          deuPerGene
      exonsPerGene[[paste0("fracAffectedExons", LETTERS[num])]] <-
          exonsPerGene[[colName]] / exonsPerGene$exons
      exonsPerGene[[colName2]] <- 0
      exonsPerGene[[colName2]][match( names(affectedWidth), exonsPerGene$groupID )] <-
          affectedWidth
      exonsPerGene[[paste0("fracAffectedBp", LETTERS[num])]] <-
          exonsPerGene[[colName2]] / exonsPerGene$geneWidth
      exonsPerGene
  }

  addGeneExpr <- function( exonsPerGene, num){
      dsd <- get( paste0( "dsd", num ) )
      dsd <- estimateSizeFactors( dsd )
      geneMeans <- rowMeans( counts( dsd, normalized=TRUE) )
      colName <- paste0( "mean", LETTERS[num] )
      exonsPerGene[[colName]] <-
          geneMeans[match( exonsPerGene$groupID, names(geneMeans) )]
      exonsPerGene
  }

  for( i in 1:3 ){
      exonsPerGene <- addGeneExpr( exonsPerGene, i )
      exonsPerGene <- addNumDeu( exonsPerGene, i )
  }

  exonsPerGene <- as.data.frame(exonsPerGene)
  rownames(exonsPerGene) <- exonsPerGene$groupID

  backFile <- file.path(path, "objects", "geneBackgrounds.RData" )
  if( file.exists( backFile ) ){
      load( backFile )
  }else{
      backgroundList <- lapply( c("A", "B", "C"), function(x){
          frm <- as.formula( paste( "sign ~ exons +", paste0( "mean", x ) ) )
          df <- exonsPerGene
          df$sign <- as.numeric( df$deuExonsA > 0 )
          set.seed(100)
          mm <- matchit( frm,
              df, meathod="nearest",
              distance="mahalanobis" )$match.matrix[,1]
          mm
      })
      names(backgroundList) <- c("subsetA", "subsetB", "subsetC")
  }

  table1 <- sapply(c("A", "B", "C"),
         function(x){
             mean <- paste0( "mean", x )
             deuExons <- paste0( "deuExons", x )
             expressed <- table( exonsPerGene$exons > 1 &
                      exonsPerGene[,mean] > 10 )["TRUE"]
             deuExpressed <- table( exonsPerGene$exons > 1 &
                         exonsPerGene[,deuExons] > 0 &
                         exonsPerGene[,mean] > 10 )["TRUE"]
             c( `Expressed (> 10 counts)`=expressed,
               `Expressed and TDU`=deuExpressed,
               `Percentage`=round(deuExpressed/expressed*100) )
         })
  rownames(table1) <- gsub(".TRUE", "", rownames(table1))
  colnames(table1) <- paste("Subset", colnames( table1 ))
  print( xtable( formatC(table1, format="d", big.mark=','), digits=0,
  caption="Many highly expressed genes are subject to transcript
  isoform regulation across tissues. Each column shows numbers
  for one subset of the GTEx data. Row 1: Number of multi-exonic
  genes with means of normalized sequenced fragments larger than
  10. Row 2: Subset of genes
  from the first row that have evidence of tissue-dependent
  usage in at least one exonic region. Row 3: Percentage of
  genes from the first row that have evidence of tissue-dependent
  usage in at least one exonic region.",
        label="tabS:table1"),
        file=file.path(path, "tables", "table1.tex") )

  table2 <- sapply( c("A", "B", "C"), function(x){
      nameB <- paste0("subset", x)
      deuExons <- paste0("deuExons", x)
      back <- as.data.frame(geneInfo[ backgroundList[[nameB]],] %>% dplyr:::count(gene_biotype) )
      back <- back[back$gene_biotype %in% "protein_coding","n"]
      fore <- as.data.frame(
          geneInfo[rownames(exonsPerGene)[which( exonsPerGene[,deuExons] > 0 )],] %>%
              dplyr:::count(gene_biotype ) )
      fore <- fore[fore$gene_biotype %in% "protein_coding","n"]
      mt <- rbind(
          c( fore, sum( exonsPerGene[,deuExons] >  0 ) - fore ),
          c( back, length( backgroundList[[nameB]] ) - back ) )
      c(`(Foreground) PC`= mt[1,1],
        `(Foreground) Not PC`=mt[1,2],
        `(Background) PC`=mt[2,1],
        `(Background) Not PC`=mt[2,2],
        `Odds ratio`=fisher.test(mt)$estimate,
        `P-value`=fisher.test(mt)$p.value)
  } )
  rownames( table2 )[5] <- "Odds ratio"
  colnames( table2 ) <- c("A", "B", "C")

  print(xtable( t(table2), display=c("s","d", "d", "d", "d", "f", "g"),
               caption="Enrichment of protein coding genes. Each row
  shows data for one subset of the GTEx data. The first four columns
  show the number of genes stratified by the categories depicted in
  the column names (PC - protein coding; foreground - genes with
  tissue-dependent usage in at least one exonic region; background -
  genes matched for expression strength and number of exonic regions).
  The fifth column shows odds ratios and the sixth column
  shows p-values from the Fisher's exact tests",
               label="tabS:table2"
              ,align=c("p{0.03\\textwidth}", "p{0.15\\textwidth}",
                   "p{0.15\\textwidth}", "p{0.15\\textwidth}", "p{0.15\\textwidth}",
                   "p{0.08\\textwidth}", "p{0.15\\textwidth}")
        ),
        format.args = list(big.mark = ",", decimal.mark = "."),
        math.style.exponents = TRUE, digits=2,
        file=file.path(path, "tables", "table2.tex") )

  plotFracEx <- function(subset){
      dfPlot <- exonsPerGene %>%
          filter_(paste(sprintf("deuExons%s", subset), ">", 0 ) )
      pl <- ggplot(dfPlot, aes_string(x=paste0("fracAffectedExons", subset)) ) +
          geom_histogram(color="black", fill="white", binwidth=.05) +
          xlab("Fraction of exonic\nregions with TDU") +
          ylab("Number of genes") +
          scale_y_continuous(labels = comma)
      pl
  }

  fig2PanelB <- plotFracEx("A")

  plotFracBp <- function(subset){
      dfPlot <- exonsPerGene %>%
          filter_(paste(sprintf("deuExons%s", subset), ">", 0 ) )
      pl <- ggplot(dfPlot, aes_string(x=paste0("fracAffectedBp", subset)) ) +
          geom_histogram(color="black", fill="white", binwidth=.05) +
          xlab("Fraction of TDU\nbase-pairs") +
          ylab("Number of genes") +
          scale_y_continuous(labels = comma)
      pl
  }

  fig2PanelC <- plotFracBp("A")

  sup4 <- plot_grid(
      plotFracEx("B"), plotFracEx("C"),
      plotFracBp("B"), plotFracBp("C"),
      ncol=2, label_size=16, labels="AUTO")

  save_plot(file.path(path, "plots", "FigSup_histFracBp.png"),
            sup4, base_height=5.6, base_aspect_ratio=1.2)

  table3 <- sapply( c("A", "B", "C"), function(x){
      fracAffected <- paste0( "fracAffectedExons", x )
      fracAffectedBp <- paste0( "fracAffectedBp", x )
      denominator <- sum(exonsPerGene[,fracAffected] > 0)
      below25Ex <- table( exonsPerGene[,fracAffected] < 0.25 &
          exonsPerGene[,fracAffected] > 0)["TRUE"]
      below25Ex
      denominator
      below25Ex / denominator
      below25Bp <- table(exonsPerGene[,fracAffectedBp] < 0.25 &
          exonsPerGene[,fracAffectedBp] > 0)["TRUE"]
      below25Bp
      below25Bp / denominator
      c(
        `# genes with TDU`=denominator,
        `# genes (< 25% ER TDU)`=below25Ex,
        `% genes (< 25% ER TDU)`=round( below25Ex/denominator * 100 ),
        `# genes (< 25% bp TDU)`=below25Bp,
        `% genes (< 25% bp TDU)`=round( below25Bp/denominator * 100 ) )
  } )
  table3 <- t( table3 )
  colnames( table3 ) <- gsub( ".TRUE", "", colnames( table3 ))

  print(xtable( table3, display=c("s", rep("d", ncol(table3) ) ), 
               caption="Transcript differences across tissues. Each
  row shows data for one subset
  of the GTEx data. The first column shows the number of genes with TDU in
  at least one exonic region. The second column displays the number of genes with
  TDU in less than 25\\% of their exonic regions. The third column shows the
  percentage of genes from the first row with TDU in less than 25\\% of their
  exonic regions. The fourth column displays the number of genes with TDU
  in less than 25\\% of their length (excluding introns). The fifth column
  shows the percentage of genes from the first row with TDU in less than 25\\% of
  their length (excluding introns).",
               label="tabS:table3"
              ,align=c("p{0.05\\textwidth}", "p{0.18\\textwidth}",
                   "p{0.18\\textwidth}", "p{0.18\\textwidth}",
                   "p{0.18\\textwidth}", "p{0.18\\textwidth}")
        ),
        format.args = list(big.mark = ",", decimal.mark = "."),
        math.style.exponents = TRUE, digits=0,
        size="\\small",
        file=file.path(path, "tables", "table3.tex") )


  save( exonsPerGene, file=file.path(path, "objects", "resultsGeneTable.RData" ) )
  save( backgroundList, file=file.path(path, "objects", "geneBackgrounds.RData" ) )
  save( resultsDF, file=file.path(path, "objects", "resultsDF.RData" ) )


  fig2 <- plot_grid( fig2PanelA, fig2PanelB, fig2PanelC, ncol=3,
                    labels = "AUTO", align = 'h')

  save_plot(file.path(path, "plots", "Fig2_ABC.png"),
            fig2, base_height=2.7, base_aspect_ratio=3)

  filter( resultsDF, padj < 0.1 ) %>%
      with(., tapply( pvals, label, max ))

#+END_SRC

*** Supplementary

#+BEGIN_SRC R

  library(Gviz)
  library(GenomicFeatures)
  library(DEXSeq)
  library(matrixStats) 
  library(SummarizedExperiment)
  library(ggplot2)
  path <- Sys.getenv("gtex")

  source( file.path(path, "org", "visualization.R") )

  load( file.path(path, "objects", "crossCoefs1.RData") )
  load( file.path(path, "objects", "crossCoefs2.RData") )
  load( file.path(path, "objects", "resultsGeneTable.RData") )
  load( file.path(path, "objects", "dxdObjects.RData") )

  opt2 <- "ENSG00000095203"

  pl <- plotGeneREUCs( crossCoefs2, opt2, colLim=.02)
  png( file.path(path, "plots", "FigSup_epb.png"), res=300, height=8,
      width=6.5, units="in")
  print( pl )
  dev.off()

  tissues <- c( "Nerve - Tibial", "Muscle - Skeletal",
               "Thyroid", "Skin - Sun Exposed (Lower leg)" ) 
  individual <- "GTEX-131XE"

  samples <- as.character( colData(dxd2)[colData(dxd2)$tissue %in% tissues &
                colData(dxd2)$individual %in% individual &
                colData(dxd2)$exon=="this","sample"] )

  as.character( colData(dxd2)[colData(dxd2)$tissue %in% tissues &
                colData(dxd2)$individual %in% individual &
                colData(dxd2)$exon=="this","tissue"] )


  geneTrack2 <- GeneRegionTrack( transcriptDb )

  png(file.path( path, "plots", "FigSup_epb2.png" ),
      height=2.5, width=5, res=600, unit="in")
  plotSashimi( sampleVec=samples,
              nameVec=c( "Skin", "Tibial\nnerve", "Skeletal\nmuscle", "Thyroid" ),
              geneID=opt2, transcriptDb=transcriptDb,
              geneTrack=geneTrack, offset=100, type="coverage",
              plotTranscripts=TRUE, covHeight=1,
              cex=1, sizes=c(1, 1, 1, 1, 1, .5) )
  dev.off()

  #pdf(file.path( path, "plots", "FigSup_epb2.pdf" ),
  #    height=2.5, width=5)
  #plotSashimi( sampleVec=samples,
  #            nameVec=c( "Skin", "Tibial\nnerve", "Skeletal\nmuscle", "Thyroid" ),
  #            geneID=opt2, transcriptDb=transcriptDb,
  #            geneTrack=geneTrack, offset=100, type="coverage",
  #            plotTranscripts=TRUE, covHeight=1,
  #            cex=1, sizes=c(1, 1, 1, 1, 1, .5) )
  #dev.off()

  dxdSubset <- dxd2[,colData(dxd2)$sample %in% samples]

  pdf( file.path(path, "plots", "FigSup_ebp3.pdf"), height=5, width=7)
  plotDEXSeq( dxdSubset, geneID=opt2, norCounts=TRUE, expression=FALSE,
             displayTranscripts=TRUE, fitExpToVar="tissue",
             transcriptDb=transcriptDb, legend=TRUE, lwd=2,
             cex=1.4, cex.axis=1.4 )
  dev.off()

  length(unique( mcols(dxdSubset)$groupID ))

#+END_SRC


** Figure 3

*** Fit linear models

#+BEGIN_SRC R

  library(DEXSeq)
  library(dplyr)
  path <- Sys.getenv("gtex")

  load( file.path(path, "objects", "resultsDF.RData" ) )
  load( file.path(path, "objects", "crossCoefs1.RData") )
  load( file.path(path, "objects", "crossCoefs2.RData") )
  load( file.path(path, "objects", "crossCoefs3.RData") )
  load( file.path(path, "objects", "crossCoefsJR1.RData") )
  load( file.path(path, "objects", "crossCoefsJR2.RData") )
  load( file.path(path, "objects", "crossCoefsJR3.RData") )

  estimateR2 <- function( crossCoefs, statistic, subset, BPPARAM=SerialParam() ){
      df <- data.frame(
          individual=rep( rownames(crossCoefs[1,,]), ncol( crossCoefs[1,,] ) ),
          tissue=rep( colnames(crossCoefs[1,,]), each=nrow( crossCoefs[1,,] ) ),
          stringsAsFactors=FALSE )
      df$reuc <- NA
      r2 <- bplapply( seq_along(dimnames(crossCoefs)[["exon"]]),
          function(x, dfL){
              df$reuc <- as.vector(crossCoefs[x,,])
  #            for( i in seq_along(rownames(df)) ){
  #                df$reuc[i] <-crossCoefs[x,df$individual[i],df$tissue[i]]
  #            }
              if( any( is.na( df$reuc ) ) ){
                  return(rep(NA, 3))
              }else{
                  anovaRes <- anova( lm( reuc ~ individual + tissue, df ) )
                  beta <- anovaRes[c("individual", "tissue", "Residuals"),"Sum Sq"]
                  return( beta )
              }
          }, dfL=df, BPPARAM=BPPARAM )
      res <- do.call(rbind, r2)
      colnames(res) <- c("individual", "tissue", "residuals")
      rownames(res) <- dimnames(crossCoefs)[["exon"]]
      res <- as.data.frame( res )
      res$statistic <- statistic
      res$subset <- subset
      res$exon <- rownames(res)
      res
  }

  BPPARAM <- SnowParam(7)

  varExplained1 <- estimateR2( crossCoefs1, "REUC", "subsetA", BPPARAM )
  varExplained2 <- estimateR2( crossCoefs2, "REUC", "subsetB", BPPARAM )
  varExplained3 <- estimateR2( crossCoefs3, "REUC", "subsetC", BPPARAM )
  varExplainedJR1 <- estimateR2( crossCoefsJR1, "RSIC", "subsetA", BPPARAM )
  varExplainedJR2 <- estimateR2( crossCoefsJR2, "RSIC", "subsetB", BPPARAM )
  varExplainedJR3 <- estimateR2( crossCoefsJR3, "RSIC", "subsetC", BPPARAM )

  varExplained <- rbind( varExplained1, varExplained2, varExplained3,
        varExplainedJR1, varExplainedJR2, varExplainedJR3 )
  rownames( varExplained ) <- NULL

  save( varExplained, file=file.path(path, "objects", "varExplained.RData") )

  load( file.path(path, "objects", "resultsDF.RData" ) )


  estimateCors <- function( cc, ccJR, BPPARAM ){
      res <- bplapply( dimnames(cc)[["exon"]], 
          function( ex, ccL, ccJRL ){
              cor( as.vector( ccL[ex,,] ), as.vector( ccJRL[ex,,] ) )
          }, ccL=cc, ccJR=ccJR, BPPARAM=BPPARAM )
      names( res ) <- dimnames(cc)[["exon"]]
      unlist( res )
  }

  cors1 <- estimateCors( crossCoefs1, crossCoefsJR1, BPPARAM )
  cors2 <- estimateCors( crossCoefs2, crossCoefsJR2, BPPARAM )
  cors3 <- estimateCors( crossCoefs3, crossCoefsJR3, BPPARAM )

  resultsDF$corRiscReuc <- NA

  for( i in 1:3 ){
      sub <- paste0( "subset", LETTERS[i] )
      corOb <- get( paste0( "cors", i ) )
      stopifnot(
          with( resultsDF[resultsDF$label == sub,],
               paste( gene, exon, sep=":" )  ) == names( corOb ) )
      resultsDF[resultsDF$label == sub,"corRiscReuc"] <- corOb
  }

  save( resultsDF, file=file.path( path, "objects", "resultsDF.RData" ) )

#+END_SRC


*** Exonic regions with evidence of being alternatively spliced

#+BEGIN_SRC R

  library(DEXSeq)
  library(ggplot2)
  library(dplyr)
  library(xtable)
  library(cowplot)
  library(scales)

  path <- Sys.getenv("gtex")
  load( file.path( path, "objects", "resultsDF.RData" ) )
  load( file.path( path, "objects", "varExplained.RData" ) )
  load( file.path( path, "objects", "resultsGeneTable.RData" ) )

  varPlot <- function( results, subset="" ){
      results <- filter( results, label == subset, padj < 0.1, tdu > 1 )
      otherMeans <- results$esMeans 
  #    numExons <- table( cut( otherMeans,
  #                    c(0, 2, 5, 10, max(otherMeans)),
  #                    include.lowest=TRUE ) )
      numExons <- table( cut( otherMeans,
                      c(0, 1, 3, 5, 10, max(otherMeans)),
                      include.lowest=TRUE ) )
      df <- data.frame(numExons)
      colnames( df ) <- c("Exon skipping\nreads", "Number")
      levels(df$`Exon skipping\nreads`)[5] <- ">10"
      pl <- ggplot(df, aes(`Exon skipping\nreads`, Number,
                           fill=`Exon skipping\nreads`)) +
          geom_bar(stat="identity") +
          ylab("Exonic regions") +
          xlab("Exon skipping reads") +
          scale_y_continuous(labels = comma) +
          theme( legend.position="none",
                axis.text.x = element_text(angle = 35, hjust = 1) )
      pl
  }

  fig3PanelA <- varPlot( resultsDF, "subsetA" )

  asSupportDF <-
      do.call(rbind,
              lapply( c("subsetA", "subsetB", "subsetC"),
                     function(x){
                         vData <- varPlot( resultsDF, x )$data
                         cbind( Subset=x, vData,
                               Percentage=round(100*vData$Number/sum(vData$Number) ) )
                     }) )
  levels( asSupportDF$Subset ) <- c( "A", "B", "C")
  colnames( asSupportDF )[2] <- "Exon skipping reads (mean)"
  colnames( asSupportDF )[3] <- "# of exonic regions"
  colnames( asSupportDF )[4] <- "% of exonic regions"

  print( xtable( asSupportDF, display=c("s", "s", "s", "d", "d") ,
  caption="Evidence of alternative splicing for exons with
  tissue-dependent usage. For each subset of the GTEx data (first column), the
  number of exonic regions with TDU (third column) is stratified
  according to their means of normalized sequenced fragments supporting
  their splicing out from transcripts (second column). The fourth column
  shows the percentage of exonic regions in each strata for each
  subset of data",
        label="tabS:table4",
        align=c("p{0.05\\textwidth}", "p{0.1\\textwidth}",
            "p{0.25\\textwidth}", "p{0.25\\textwidth}", 
            "p{0.25\\textwidth}") ),
        hline.after=c(-1, 0, 5, 10, nrow(asSupportDF) ),
        format.args = list(big.mark = ",", decimal.mark = "."),
        digits=0, include.rownames=FALSE,
        file=file.path(path, "tables", "table4.tex") )


  for( subset in c("A", "B", "C") ){
      lab <- paste0( "subset", subset )
      deuAs <- paste0( "deuAsSupport", subset )
      asExons <- filter( resultsDF, label == lab,
          padj < 0.1, tdu > 1,
          esMeans > 1 ) %>% count(gene)
      exonsPerGene[[deuAs]] <- 0
      exonsPerGene[as.character( asExons$gene ),deuAs] <- asExons$n
  }

  asSupportGenes <- sapply( c("A", "B", "C"), function(subset){
      deuExons <- paste0("deuExons", subset )
      deuExonsAs <- paste0("deuAsSupport", subset )
      numDeuEx <- sum( exonsPerGene[,deuExons] > 0 )
      numAsDeuEx <- sum( exonsPerGene[,deuExonsAs] == exonsPerGene[,deuExons] &
          exonsPerGene[,deuExons] > 0 )
      c( `# of genes with TDU`=numDeuEx,
        `# of genes with TDU (fully AS explained)`=numAsDeuEx,
        `% of genes with TDU (fully AS explained)`=round( numAsDeuEx/numDeuEx*100 ) )
  })


  print( xtable( asSupportGenes, display=c("s", "d", "d", "d"),
  caption="Genes with TDEU that could be explained by alternative splicing.
  Each column shows data for a subset of the GTEx data.
  The first row shows the number of genes with tissue-dependent
  usage in at least one exonic region. The second row shows the
  subset of genes from the first row in which all the exonic regions
  that are used in a tissue-dependent manner have evidence of being
  alternatively spliced (normalized mean across samples of
  exon-skipping reads larger than 1). The third row shows the
  same quantity as the second row but expressed in percentage of genes.",
        label="tabS:table5" ),
        format.args = list(big.mark = ",", decimal.mark = "."),
        digits=0, include.rownames=TRUE,
        file=file.path(path, "tables", "table5.tex") )


  plotR2R2 <- function( varExplained, results, sub ){
      varResults <-
          filter( varExplained, subset == sub )
      results <- filter( results, label == sub )
      otherMeans <- results$esMeans
      names( otherMeans ) <- with( results, paste( gene, exon, sep=":"))
      tissueSign <- filter( results, padj < 0.1 )[,c("gene", "exon")]
      tissueSign <- paste( tissueSign$gene, tissueSign$exon, sep=":" )
      varResults <- split( varResults, varResults$statistic )
      stopifnot( all( varResults[["REUC"]]$exon == varResults[["RSIC"]]$exon ) )
      stopifnot( all( names(otherMeans) == varResults[["REUC"]]$exon ) )
      dfPlot <- as.data.frame( sapply( varResults, function(x){
                 percentageTissue=x[,c("tissue")] /
              rowSums( x[,c("tissue", "individual", "residuals" ) ] ) } ) )
      rownames( dfPlot ) <- varResults[[1]]$exon
  #    dfPlot$Junctions <- cut( otherMeans, c(0, 2, 5, 10, max(otherMeans) ),
  #                            include.lowest=TRUE )
  #    levels(dfPlot$Junctions)[4] <- ">10"
      dfPlot$Junctions <- cut( otherMeans, c(0, 1, 3, 5, 10, max(otherMeans) ),
                              include.lowest=TRUE )
      levels(dfPlot$Junctions)[5] <- ">10"
      dfPlot <- dfPlot[tissueSign,]
      p3 <- ggplot( dfPlot, aes( REUC, RSIC,
                                color=Junctions ) ) +
          geom_point( alpha=.25, size=.1 ) +
          xlab( expression(paste( R^{2}, "of REUCs" ) ) ) +
          ylab( expression(paste( R^{2}, "of RSICs" ) ) ) +
          guides(colour = guide_legend(title="Exon\nskipping\nreads (mean)") ) +
          theme(legend.position="none")
      p3
  }

  fig3PanelB <- plotR2R2( varExplained, resultsDF, "subsetA" )

  plotCorDensities <- function( results, subset ){
      dfHist <- filter( resultsDF, label == subset )
      dfHist <- filter( resultsDF, padj < 0.1, tdu > 1 )
  #    dfHist$Junctions <- cut( dfHist$esMeans, c(0, 2, 5, 10, max( dfHist$esMeans )),
  #                            include.lowest=TRUE)
  #    levels(dfHist$Junctions)[4] <- ">10"
      dfHist$Junctions <- cut( dfHist$esMeans, c(0, 1, 3, 5, 10, max( dfHist$esMeans )),
                              include.lowest=TRUE)
      levels(dfHist$Junctions)[5] <- ">10"
      gp <- ggplot(dfHist) +
          stat_ecdf(aes(corRiscReuc, #y=..scaled..,
                           group=Junctions, colour = Junctions),
                      geom="line", lwd=1.3) +
          xlim(-0.4, 1) +
          xlab("Correlation") +
          ylab("Cumulative\ndistribution") +
          guides(
              colour = guide_legend( title="Exon skipping reads"),
              fill = FALSE ) +
          theme(legend.position="none")
      gp
  }


  fig3PanelC <- plotCorDensities( resultsDF, "subsetA" )

  save_plot( file.path( path, "plots", "figure3.png"),
            plot_grid( fig3PanelA, fig3PanelB, fig3PanelC, ncol=3,
                      align='h', labels="AUTO"),
            base_height=2.7, base_aspect_ratio=3 )

  save_plot( file.path(path, "plots", "FigS6.png"),
            plot_grid(
                varPlot( resultsDF, "subsetB" ),
                plotR2R2( varExplained, resultsDF, "subsetB" ),
                plotCorDensities( resultsDF, "subsetB" ),
                varPlot( resultsDF, "subsetC" ),
                plotR2R2( varExplained, resultsDF, "subsetC" ),
                plotCorDensities( resultsDF, "subsetC" ), ncol=3,
                align="hv", labels="AUTO"),
            base_height=5, base_aspect_ratio=1.7 )              

                

#+END_SRC


** Figure 4

*** Overlap with FANTOM

#+BEGIN_SRC R

  library(DEXSeq)
  library(xtable)
  path <- Sys.getenv("gtex")

  load( file.path( path, "objects", "fantomDxd.RData" ) )

  BPPARAM <- SnowParam(7)

  fantom1 <- estimateSizeFactors( fantom1 )
  fantom2 <- estimateSizeFactors( fantom2 )
  fantom3 <- estimateSizeFactors( fantom3 )
  fantom1 <- estimateDispersions( fantom1, BPPARAM=BPPARAM )
  fantom2 <- estimateDispersions( fantom2, BPPARAM=BPPARAM )
  fantom3 <- estimateDispersions( fantom3, BPPARAM=BPPARAM )
  fantom1 <- testForDEU( fantom1, BPPARAM=BPPARAM )
  fantom2 <- testForDEU( fantom2, BPPARAM=BPPARAM )
  fantom3 <- testForDEU( fantom3, BPPARAM=BPPARAM )


  save( fantom1, fantom2, fantom3,
       file=file.path(path, "objects", "fantomDxd.RData") )


  load( file.path( path, "objects", "fantomDxd.RData" ) )
  load( file.path( path, "objects", "resultsGeneTable.RData") )

  table6 <- sapply( 1:3, function(x){
      fantomObject <- get( paste0("fantom", x) )
      deuExons <- paste0( "deuExons", LETTERS[x] )
      res <- DEXSeqResults( fantomObject )
      testedGenes <- unique( res$groupID[!is.na( res$pvalue )] )
      dTssGenes <- unique( res$groupID[which(res$padj < 0.1)] )
      tdeuGenes <- rownames(exonsPerGene)[exonsPerGene[,deuExons] > 0]
      b <- sum( testedGenes %in% tdeuGenes )
      f <- sum( dTssGenes %in% tdeuGenes )
      mat <- rbind(
          c( f, length(dTssGenes) - f ),
          c( b, length(testedGenes) - b ) )
      ft <- fisher.test(mat)
      list(
          `Cell-types` = paste( levels( fantomObject$tissue ), collapse=", "),
          `# genes` = length( testedGenes ),
          `# TDEU` = length( tdeuGenes ),
          `# dTSS` = length( dTssGenes ),
          `# dTSS and TDEU` = f,
          `% dTSS and TDEU` = round( 100 * f / length( dTssGenes )),
          `Odds ratio` = ft$estimate,
          `P-value` = ft$p.value )
  })
  table6 <- t( table6 )
  rownames( table6 ) <- LETTERS[1:3]


  print( xtable( table6, display=c("s", "s", "d", "d", "d", "d", "d", "f", "e"),
         caption="Overlap between genes with differential transcriptional
  start sites usage and genes with differential exon usage. Each row shows
  data for one subset of tissues. The first
  column contains the cell-types available from the FANTOM consortium for each
  subset of the GTEx data. The second column shows the number of genes
  that were tested for differential transcription start site (dTSS) usage.
  The third column shows the number of genes that were tested for dTSS usage
  that had tissue-dependent exon usage (TDEU). The fourth column
  shows the number of genes with dTSS usage at a FDR of 10\\%. The fifth column
  shows the number of genes with dTSS usage that were also detected to have
  TDEU. The sixth column shows the percentage of genes with
  dTSS that were also detected to have TDEU. The seventh column shows odds
  ratios and the eighth column shows p-values from Fisher's exact tests.",
         label="tabS:table6",
         align=c("p{0.02\\textwidth}", "p{0.2\\textwidth}", "p{0.06\\textwidth}",
             "p{0.06\\textwidth}", "p{0.06\\textwidth}", "p{0.06\\textwidth}",
             "p{0.06\\textwidth}", "p{0.06\\textwidth}", "p{0.16\\textwidth}")
         ),
        hline.after=c(-1, 0, 1, 2),
        format.args = list(big.mark = ",", decimal.mark = "."),
        math.style.exponents = TRUE, digits=2,
        file= file.path( path, "tables", "table6.tex" ) )


#+END_SRC   

*** FANTOM tracks

**** Plots

#+BEGIN_SRC R

  library(dplyr)
  library(cowplot)
  path <- Sys.getenv("gtex")
  source(file.path(path, "org", "visualization.R") )

  load( file.path( path, "objects", "dxdObjects.RData" ) )
  load( file.path( path, "objects", "fantomDxd.RData" ) )
  load( file.path( path, "objects", "resultsGeneTable.RData" ) )
  load( file.path( path, "objects", "crossCoefs1.RData" ) )
  load( file.path( path, "objects", "crossCoefsJR1.RData" ) )
  load( file.path( path, "objects", "crossCoefs2.RData" ) )
  load( file.path( path, "objects", "crossCoefsJR2.RData" ) )
  load( file.path( path, "objects", "crossCoefs3.RData" ) )
  load( file.path( path, "objects", "crossCoefsJR3.RData" ) )

  seqlevelsStyle(fantom1) <- "ENSEMBL"
  seqlevelsStyle(fantom2) <- "ENSEMBL"
  seqlevelsStyle(fantom3) <- "ENSEMBL"

  getSampleIdentifiers <- function( tissues, individual, dxd ){
      sapply( tissues, function(x){
                 unique( as.character(
                     colData(dxd)[colData(dxd)$tissue %in% x &
                                  colData(dxd)$individual %in% individual,
                                  "sample"] ) )
             })
  }

  pr2 <- "ENSG00000007237"
  png( file.path( path, "plots", "figSup_gas7reuc.png" ), res=300,
      height=9, width=8, unit="in")
  plotGeneREUCs( crossCoefs1, geneName=pr2, colLim=0.03 )
  dev.off()

  png( file.path( path, "plots", "figSup_gas7rsic.png" ), res=300,
     height=9, width=8, unit="in")
  plotGeneREUCs( crossCoefsJR1, geneName=pr2, colLim=0.03 ) +
      guides(fill = guide_colorbar(title="RSIC") )
  dev.off()

  samples <- getSampleIdentifiers(
      c("Brain - Cerebellum", "Brain - Frontal Cortex (BA9)"),
      "GTEX-12ZZX", dxd1 )
  tissuesFantom <- c("Cerebellum", "Cortex")
  png( file.path( path, "plots", "Fig4_gas7_allSashimi.png" ),
      res=300, height=3, width=3.5, unit="in" )
  plotSashimi( samples,
              nameVec=c("Cerebellum\nRNA", "Cortex\nRNA"),
              geneID=pr2,
              transcriptDb=transcriptDb, geneTrack=geneTrack,
              offset=200, type=c("coverage"),
              rnaYLim=c(0, 100),
              cex=1, sizes=c(1.5, 1.5, 1.5, 1.5, 1, .8),
              fantomObject=fantom1, fantomTissues=tissuesFantom,
              fantomLabs=c("Cerebellum\nTSS", "Cortex\nTSS") )
  dev.off()
  pdf( file.path( path, "plots", "Fig4_gas7_allSashimi.pdf" ),
      height=3, width=3.5 )
  plotSashimi( samples,
              nameVec=c("Cerebellum\nRNA", "Cortex\nRNA"),
              geneID=pr2,
              transcriptDb=transcriptDb, geneTrack=geneTrack,
              offset=200, type=c("coverage"),
              rnaYLim=c(0, 100),
              cex=1, sizes=c(1.5, 1.5, 1.5, 1.5, 1, .8),
              fantomObject=fantom1, fantomTissues=tissuesFantom,
              fantomLabs=c("Cerebellum\nTSS", "Cortex\nTSS") )
  dev.off()
  coords <- range( geneTrack@range[geneTrack@range$transcript %in% pr2 & geneTrack@range$exon %in% c("E026", "E028", "E030"),] )
  start( coords ) <- start( coords ) - 100
  end( coords ) <- end( coords ) + 200
  png( file.path( path, "plots", "FigS_gas7_locSashimi.png" ), res=300,
      height=3, width=3.5, unit="in")
  plotSashimi( samples,
              geneID=pr2,
              coords=coords,
              highlight=c("E027", "E028", "E029"),
              nameVec=c("Cerebellum", "Cortex"),
              transcriptIntrons=c("ENST00000323816", "ENST00000583882"),
              transcriptDb=transcriptDb, geneTrack=geneTrack,
              offset=0, type=c("coverage", "sashimi"),
              sizes=c(1, 1, .4, .6),
              plotTranscripts=FALSE)
  dev.off()

  pr2 <- "ENSG00000170421"
  png( file.path( path, "plots", "figSup_krt8reuc.png" ),
      res=300, height=9.6, width=8, unit="in")
  plotGeneREUCs( crossCoefs2, pr2, colLim=0.02 )
  dev.off()
  png( file.path( path, "plots", "figSup_krt8rsic.png" ),
      res=300, height=9.6, width=8, unit="in")
  plotGeneREUCs( crossCoefsJR2, pr2, colLim=0.02 ) +
      guides(fill = guide_colorbar(title="RSIC") )
  dev.off()
  samples <- getSampleIdentifiers(
      c("Adipose - Subcutaneous", "Thyroid"),
      "GTEX-11EI6", dxd2 )
  tissuesFantom <- c("Adipose - Subcutaneous", "Thyroid")
  png( file.path( path, "plots", "Fig4_krt8_allSashimi.png" ),
      res=300, height=3.2, width=3.5, unit="in" )
  plotSashimi( samples,
              nameVec=c("Adipose\nRNA", "Thyroid\nRNA"),
              geneID=pr2,
              plotTranscripts=FALSE,
              transcriptDb=transcriptDb, geneTrack=geneTrack,
              offset=200, type=c("coverage"), #rnaYLim=c(0, 100),
              cex=1, sizes=c(1.5, 1.5, 1.5, 1.5, 1, .8),
              fantomObject=fantom2, fantomTissues=tissuesFantom,
              fantomLabs=c("Adipose\nTSS", "Thyroid\nTSS") )
  dev.off()
  pdf( file.path( path, "plots", "Fig4_krt8_allSashimi.pdf" ),
      height=3.2, width=3.5 )
  plotSashimi( samples,
              nameVec=c("Adipose\nRNA", "Thyroid\nRNA"),
              geneID=pr2,
              plotTranscripts=FALSE,
              transcriptDb=transcriptDb, geneTrack=geneTrack,
              offset=200, type=c("coverage"), #rnaYLim=c(0, 100),
              cex=1, sizes=c(1.5, 1.5, 1.5, 1.5, 1, .8),
              fantomObject=fantom2, fantomTissues=tissuesFantom,
              fantomLabs=c("Adipose\nTSS", "Thyroid\nTSS") )
  dev.off()

  pr2 <- "ENSG00000078114"
  png( file.path(path, "plots", "figSup_neblreuc.png"), 
      res=300, height=9.6, width=8, unit="in" )
  plotGeneREUCs( crossCoefs3, pr2, colLim=0.02 )
  dev.off()
  png( file.path(path, "plots", "figSup_neblrsic.png"),
      res=300, height=9.6, width=8, unit="in" )
  plotGeneREUCs( crossCoefsJR3, pr2, colLim=0.02 ) +
      guides(fill = guide_colorbar(title="RSIC") )
  dev.off()
  tissuesFantom <- c("Heart", "Pancreas")
  samples <- getSampleIdentifiers(
      c( "Heart - Left Ventricle", "Pancreas" ),
      "GTEX-ZF29", dxd3)
  png( file.path(path, "plots", "Fig4_nebl_allSashimi.png"),
      res=300, height=3.2, width=3.5, unit="in" )
  plotSashimi( samples,
              nameVec=c("Heart\nRNA", "Pancreas\nRNA"),
              geneID=pr2,
              plotTranscripts=FALSE,
              transcriptDb=transcriptDb, geneTrack=geneTrack,
              offset=200, type=c("coverage"),
              rnaYLim=list( c(0, 400), c(0, 10) ),
              cex=1, sizes=c(1.5, 1.5, 1.5, 1.5, 1, .8),
              fantomObject=fantom3, fantomTissues=tissuesFantom,
              fantomLabs=c( "Heart\nTSS", "Pancreas\nTSS") )
  dev.off()
  pdf( file.path(path, "plots", "Fig4_nebl_allSashimi.pdf"),
      height=3.2, width=3.5 )
  plotSashimi( samples,
              nameVec=c("Heart\nRNA", "Pancreas\nRNA"),
              geneID=pr2,
              plotTranscripts=FALSE,
              transcriptDb=transcriptDb, geneTrack=geneTrack,
              offset=200, type=c("coverage"),
              rnaYLim=list( c(0, 400), c(0, 10) ),
              cex=1, sizes=c(1.5, 1.5, 1.5, 1.5, 1, .8),
              fantomObject=fantom3, fantomTissues=tissuesFantom,
              fantomLabs=c( "Heart\nTSS", "Pancreas\nTSS") )
  dev.off()

#+END_SRC



** Figure 5

*** Generate a background set of exons

#+BEGIN_SRC R

  library(DEXSeq)
  library(MatchIt)
  library(dplyr)
    
  path <- Sys.getenv("gtex")

  load(file.path(path, "objects", "dxdObjects.RData"))
  load(file.path(path, "objects", "resultsDF.RData"))
  load(file.path(path, "objects", "geneInfo.RData"))

  widths <- width( rowRanges(dxd1) )
  names( widths ) <- rownames(dxd1)
  resultsDF$exonWidth <- widths[rownames(dxd1)]

  resultsDF <- resultsDF[resultsDF$gene %in%
                         rownames(geneInfo)[geneInfo$gene_biotype=="protein_coding"],]

  backgroundExons <- lapply( c("subsetA", "subsetB", "subsetC"), function(x){
             df <- filter( resultsDF, label == x )
             df <- df[,c("gene", "exon", "mean", "tdu", "padj", "exonWidth")]
             df$padj[is.na(df$padj)] <- 1
             df$tdu[is.na(df$tdu)] <- 0
             df <- mutate(df, sign=as.numeric(padj < 0.1 & tdu > 1))
             set.seed(100)
             rownames(df) <- with( df, paste(gene, exon, sep=":"))
             mm <- matchit( sign ~ mean + exonWidth, df, method="nearest",
                           distance="mahalanobis" )
             mm$match.matrix[,1]
         } )


  names(backgroundExons) <- LETTERS[1:3]

  save( backgroundExons,
       file=file.path(path, "objects", "backgroundExons.RData") )


#+END_SRC


*** Exon classifications

#+BEGIN_SRC R

  library(DEXSeq)
  library(ggplot2)
  library(GenomicFeatures)
  library(dplyr)

  path <- Sys.getenv("gtex")

  load( file.path( path, "objects", "resultsDF.RData" ) )
  load( file.path( path, "objects", "dxdObjects.RData" ) )
  load( file.path( path, "objects", "transcriptInfo.RData") )
  load( file.path( path, "objects", "geneInfo.RData" ) )
  load( file.path( path, "objects", "backgroundExons.RData") )

  load( file.path( path, "objects", "crossCoefs1.RData") )
  load( file.path( path, "objects", "crossCoefs2.RData") )
  load( file.path( path, "objects", "crossCoefs3.RData") )

  load( file.path( path, "objects", "crossCoefsJR1.RData") )
  load( file.path( path, "objects", "crossCoefsJR2.RData") )
  load( file.path( path, "objects", "crossCoefsJR3.RData") )

  transcriptDb <- loadDb( file.path( path, "objects", "GRCh38.sqlite") )

  aprisTxIDs <- rownames(transcriptInfo)[transcriptInfo$transcript_appris != ""]
  exonsByTx <- exonsBy(transcriptDb, "tx", use.names=TRUE)
  cdsByTx <- cdsBy( transcriptDb, "tx", use.names=TRUE )
  threeByTx <- threeUTRsByTranscript( transcriptDb )
  fiveByTx <- fiveUTRsByTranscript( transcriptDb )

  cdsIndexes <- queryHits( findOverlaps( rowRanges(dxd1),
                                       cdsByTx ) )

  cdsAprisIndexes <- queryHits( findOverlaps( rowRanges(dxd1),
                                       cdsByTx[aprisTxIDs] ) )

  threeUTRIndexes <- queryHits( findOverlaps( rowRanges(dxd1),
                                       threeByTx ) )

  fiveUTRIndexes <- queryHits( findOverlaps( rowRanges(dxd1),
                                       fiveByTx ) )

  exonAnnotation <- data.frame(
      proteinCoding=seq_len(nrow(dxd1)) %in% cdsIndexes,
      proteinCodingAppris=seq_len(nrow(dxd1)) %in% cdsAprisIndexes,
      threeUTR=seq_len(nrow(dxd1)) %in% threeUTRIndexes,
      fiveUTR=seq_len(nrow(dxd1)) %in% fiveUTRIndexes )
  rownames(exonAnnotation) <- rownames(dxd1)

  exonAnnotation$proteinCodingGene <-
      sapply( strsplit( rownames( exonAnnotation ), ":" ), "[[", 1 ) %in%
      filter( geneInfo, gene_biotype == "protein_coding" )$ensembl_gene_id

  disambiguateRegions <- function( x ){
      stopifnot( all( x %in% rownames(exonAnnotation) ) )
      exAnnotation <- exonAnnotation[x,]
      stopifnot( all( exAnnotation$proteinCodingGene ) )
      pcAppris <- exAnnotation$proteinCodingAppris
      pcRest <- exAnnotation$proteinCoding &
          !exAnnotation$proteinCodingAppris
      threeUTR <- !exAnnotation$proteinCoding &
          exAnnotation$threeUTR &
          !exAnnotation$fiveUTR
      fiveUTR <- !exAnnotation$proteinCoding &
          exAnnotation$fiveUTR &
          !exAnnotation$threeUTR
      ambiguousUTR <- ( !exAnnotation$proteinCoding ) &
          exAnnotation$fiveUTR & exAnnotation$threeUTR
      otherUTR <- !exAnnotation$proteinCoding &
          !exAnnotation$fiveUTR &
          !exAnnotation$threeUTR
      df <- data.frame(
          `ApprisCoding`=pcAppris,
          `OtherCoding`=pcRest,
          `FiveUTR`=threeUTR,
          `ThreeUTR`=fiveUTR,
          `OtherUTR`=otherUTR )
      rownames(df) <- x
      df <- df[!ambiguousUTR,]
      df
  }

  getConfDEUExons <- function(x, splicing=FALSE){
      if(splicing){
          thr <- 10
          f <- `>`
      }else{
          thr <- 1
          f <- `<`
      }
      with(
          filter( resultsDF,
              label==paste0("subset", x),
              padj < 0.1, tdu > 1,
              f( esMeans, thr ),
              gene %in% filter( geneInfo,
                               gene_biotype == "protein_coding" )$ensembl_gene_id),
           paste(gene, exon, sep=":") )
  }

  getProportions <- function( x, mergeUTRs=FALSE, percentages=TRUE, verbose=TRUE){
      fore <- getConfDEUExons( x, splicing=TRUE )
      foreNS <- getConfDEUExons( x, splicing=FALSE )
      back <- backgroundExons[[x]]
      numbers <- lapply( list( fore, foreNS, back), function(y){
                 drDf <- disambiguateRegions(y)
                 colSums( drDf )
             })
      numbers <- as.data.frame(do.call(cbind, numbers))
      colnames(numbers) <- c("SplicingDEU", "OtherDEU", "Background")
      if( mergeUTRs ){
          numbers <- rbind(numbers[c("ApprisCoding", "OtherCoding"),],
          `Untranslated`=colSums(numbers[grep("UTR", rownames(numbers)),]) )
      }
      if( verbose ){
          print(chisq.test(numbers))
      }
      if( percentages ){
          numbers <- round( 100* t(t(numbers)/colSums(numbers)), 2)
      }
      df <- data.frame(
          DEU=factor(rep(colnames(numbers), each=nrow(numbers) ),
              levels=c("SplicingDEU", "OtherDEU", "Background")),
          Gen=factor(rep(rownames(numbers), ncol(numbers)),
              levels=c("ApprisCoding", "OtherCoding", "FiveUTR", "ThreeUTR", "OtherUTR")),
          numb=as.vector(as.matrix(numbers)) )
      nms1 <- c("DEU (AS)", "DEU (NAS)", "Background")
      names(nms1) <- c("SplicingDEU", "OtherDEU", "Background")
      nms2 <- c("Coding (PI)", "Coding (non-PI)", "5' UTR", "3' UTR", "Processed transcript")
      names(nms2) <- c("ApprisCoding", "OtherCoding", "FiveUTR", "ThreeUTR", "OtherUTR")
      levels(df$DEU) <- nms1[levels(df$DEU)]
      levels(df$Gen) <- nms2[levels(df$Gen)]
      df
  }


  plotProportions <- function(df){
      cbPalette <- c('#66c2a5','#fc8d62','#8da0cb','#e78ac3','#a6d854')
  #    cbPalette <- c('#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00')
      pcp <- ggplot(df, aes( DEU, numb, fill=Gen)) +
          geom_bar(stat="identity") +
              theme(text=element_text(size=16),
                    axis.text.x=element_text(angle=20, hjust=1),
                    legend.text=element_text(size=12),
                    legend.key.width = unit(.09, "in"),
                    legend.title=element_blank()) + xlab("") +
                    ylab("% of exonic\nregions") +
                    scale_fill_manual(values=cbPalette)
      pcp
  }

  library(cowplot)
  save_plot( file.path( path, "plots", "figure5PanelA.pdf"),
                         plot_grid( plotProportions(
                             getProportions( "A", mergeUTRs=FALSE ) ) +
                             theme(legend.position="top") +
                             guides(fill=guide_legend(direction="horizontal", nrow=3,
                                                      byrow=TRUE))),
            base_height=3.5, base_width=2.8, unit="in")

  prow <- plot_grid(
      plotProportions( getProportions("B", mergeUTRs=FALSE)) +
         theme(legend.position="none"),
      plotProportions( getProportions("C", mergeUTRs=FALSE)) +
         theme(legend.position="none"),
      align = 'vh', labels = c("A", "B") )
  leg <- get_legend( plotProportions( getProportions("B", mergeUTRs=FALSE)))

  save_plot( file.path(path, "plots", "figSupCoding.png"),
      plot_grid( prow, leg, nrow = 1, rel_widths=c(1, .4)),
            base_width=7.5, base_height=3)

  source(file.path(path, "org", "visualization.R") )

  getIndivPval <- function( subset="A", categ="Coding (PI)",
                           what=c("DEU (AS)", "DEU (NAS)", "Background"),
                           returnMat=FALSE){
      numbs <- getProportions(subset, percentage=FALSE, verbose=FALSE)
      mt <- matrix(0, ncol=2, nrow=3)
      rownames( mt ) <- c("DEU (AS)", "DEU (NAS)", "Background")
      colnames( mt ) <- c( categ, "Others")
      numbIn <- filter( numbs, Gen == categ )$numb
      names( numbIn ) <- filter( numbs, Gen == categ )$DEU
      numbOut <- tapply(
          filter( numbs, Gen != categ )$numb,
          filter( numbs, Gen != categ )$DEU,
          sum)
      mt[,categ] <- numbIn[rownames(mt)]
      mt[,"Others"] <- numbOut[rownames(mt)]
      mt <- mt[rownames( mt ) %in% what,]
      if( returnMat ){
          return(mt)
      }
      print(mt)
      chisq.test(mt)    
  }

  getIndivPval( "A", categ="5' UTR", what=c("DEU (NAS)", "Background") )
  getIndivPval( "B", categ="5' UTR", what=c("DEU (NAS)", "Background") )
  getIndivPval( "C", categ="5' UTR", what=c("DEU (NAS)", "Background") )

  getIndivPval( "A", categ="3' UTR", what=c("DEU (NAS)", "Background") )
  getIndivPval( "B", categ="3' UTR", what=c("DEU (NAS)", "Background") )
  getIndivPval( "C", categ="3' UTR", what=c("DEU (NAS)", "Background") )

  table7 <- do.call(rbind, lapply(c("A", "B", "C"), function(x){
      df <- cbind( subset=x, getProportions( x, percentage=FALSE, verbose=FALSE ) )
      df$Percentage <- getProportions( x, percentage=TRUE, verbose=FALSE )$numb
      colnames( df ) <- c("Subset", "Exon usage class", "Genomic class", "# of exons", "% of exons")
      df
  }) )

  library(xtable)

  print(xtable(table7, display=c("d", "s", "s", "s", "d", "f"),
               caption="Classification of exonic regions
  according to their usage across tissues and to transcript
  isoform annotations. The first column indicates the GTEx subset.
  The second column indicates exonic region classifications according
  to whether (a) they were detected to be differentially used and had
  a mean larger than ten of normalized reads supporting their alternative
  splicing [DEU (AS)], (b) they were differentially used and had a mean
  smaller than 1 of normalized read supporting their alternative splicing
  [DEU (NAS)], or (c) they were part of the background matched for expression
  strength and width [background]. The third column shows the exonic
  region classes according to transcript isoform annotations. The
  fourth column shows the number of exonic regions in each exon class. The
  fifth column shows, for each usage category on each data subset,
  the percentage exonic regions in each genomic class.",
               label="tabS:table7"
        ),
        file=file.path(path, "tables", "table7.tex"),
        format.args = list(big.mark = ",", decimal.mark = "."),
        hline.after=c(-1, 0, 5, 10, 15, 20,
            25, 30, 35, 40, 45),
        math.style.exponents = TRUE, digits=0,
        size="\\footnotesize",
        include.rownames=FALSE )

  gn <- "ENSG00000008710"
  ft <- "E051"
  exns <- paste(gn, ft, sep=":")
  png( file.path(path, "plots", "figSup_pkd1_rsic.png"),
      height=1.8, width=5, unit="in", res=300 )
  plotGeneREUCs( crossCoefsJR1, geneName=gn,colLim=0.03,
      exons=sprintf("E%.3d", 50:52) ) +
      guides(fill = guide_colorbar(title="RSIC") )
  dev.off()
  coordIndex <- which( rownames(dxd1) %in% exns )
  coordIndex <- c(min(coordIndex) - 1, coordIndex, max(coordIndex) + 1)
  coords <- range(rowRanges(dxd1)[coordIndex])
  samples <- getSampleIdentifiers(
      c( "Brain - Cerebellum", "Brain - Frontal Cortex (BA9)" ),
      "GTEX-WL46", 
      dxd1 )
  pdf( file.path( path, "plots", "fig5_pkd1_sashimi.pdf" ),
      height=3, width=3 )
  plotSashimi( samples, nameVec=c("Cerebellum", "Frontal\ncortex"),
              geneID=gn, coords=coords, transcriptDb=transcriptDb,
              geneTrack=geneTrack, highlight=ft,
              plotTranscripts=TRUE, sizes=c(1.2, 1.2, .6, .4))
  dev.off()

  #gn <- candidates[13]
  #gn <- candidates[16] #muy bueno
  #gn <- candidates[49]
  #gn <- candidates[65]

  gn <- "ENSG00000013288"
  ft <- "E018"
  exns <- paste(gn, ft, sep=":")
  coordIndex <- which( rownames(dxd2) %in% exns )
  coordIndex <- c(min(coordIndex) - 1, coordIndex, max(coordIndex) + 1)
  coords <- range(rowRanges(dxd2)[coordIndex])
  png( file.path(path, "plots", "figSup_man2b2_rsic.png"),
      height=1.8, width=5, unit="in", res=300 )
  plotGeneREUCs( crossCoefsJR2, geneName=gn, colLim=0.02,
                exons=sprintf("E%.3d", 17:19)) +
      guides(fill = guide_colorbar(title="RSIC") )
  dev.off()
  samples <- getSampleIdentifiers(
      c( "Artery - Tibial", "Whole Blood" ),
      "GTEX-ZTPG",
      dxd2 )
  pdf( file.path( path, "plots", "fig5_man2b2_sashimi.pdf" ),
      height=3, width=3 )
  plotSashimi( samples, nameVec=c("Tibial\nartery", "Blood"),
              geneID=gn, coords=coords, transcriptDb=transcriptDb,
              geneTrack=geneTrack, highlight=ft,
              plotTranscripts=TRUE, sizes=c(1.2, 1.2, .6, .4) )
  dev.off()

  gn <- "ENSG00000010322"
  ft <- "E009"
  exns <- paste(gn, ft, sep=":")
  coordIndex <- which( rownames(dxd3) %in% exns )
  coordIndex <- c(min(coordIndex) - 1, coordIndex, max(coordIndex) + 1)
  coords <- range(rowRanges(dxd3)[coordIndex])
  png( file.path(path, "plots", "figSup_nisch_rsic.png"),
      height=1.8, width=5, unit="in", res=300 )
  plotGeneREUCs( crossCoefsJR3, geneName=gn, colLim=0.02,
                exons=sprintf("E%.3d", 8:10)) +
      guides(fill = guide_colorbar(title="RSIC") )
  dev.off()
  samples <- getSampleIdentifiers(
      c("Esophagus - Muscularis", "Heart - Left Ventricle"),
      "GTEX-111YS",
      dxd3 )
  samples
  pdf( file.path( path, "plots", "fig5_nisch_sashimi.pdf" ),
      height=3, width=3 )
  plotSashimi( samples, nameVec=c("Esophagus", "Heart"),
              geneID=gn, coords=coords,
              transcriptDb=transcriptDb,
              geneTrack=geneTrack, highlight=ft,
              plotTranscripts=TRUE, sizes=c(1.2, 1.2, .6, .4) )
  dev.off()

  plotDf <- lapply( c("A", "B", "C"), function(x){
      exonLists <- list( 
          confSp=getConfDEUExons( x, splicing=FALSE ),
          confNSp=getConfDEUExons( x, splicing=TRUE ),
          back=backgroundExons[[x]] )
      spUnique <- strsplit( unique(unlist( exonLists ) ), ":" )
      tmpDf <- filter( resultsDF,
          label==paste0("subset", x),
          paste(gene, exon, sep=":") %in% unlist(exonLists) )
      rownames( tmpDf ) <- with(tmpDf, paste(gene, exon, sep=":"))
      tmpDf$exonClass <- NA
      for( x in names(exonLists) ){
          tmpDf[exonLists[[x]],"exonClass"] <- x
      }
      tmpDf <- tmpDf[,c("mean", "label", "exonClass")]
      exonClass <- disambiguateRegions( rownames(tmpDf) )
      tmpDf <- tmpDf[rownames(exonClass),]
      exonClass2 <- colnames(exonClass)[apply( exonClass, 1, which)]
      tmpDf$exonClass2 <- exonClass2
      tmpDf
  } )
  plotDf <- do.call(rbind, plotDf)
  plotDf$mean <- log10( plotDf$mean + 1 )
  plotDf$exonClass <- factor( plotDf$exonClass, levels=c("confSp", "confNSp", "back"))
  levels( plotDf$exonClass ) <- c("DEU (Splicing)", "DEU (Other)", "Background")
  levels( plotDf$label ) <- c("A", "B", "C")
  plotDf$exonClass2 <- factor( plotDf$exonClass2,
      levels=c("ApprisCoding", "OtherCoding", "FiveUTR", "ThreeUTR", "OtherUTR") )
  levels( plotDf$exonClass2 ) <- c("Coding (PI)", "Coding (non-PI)",
      "5' UTR", "3' UTR", "Processed transcript")

  pdf( file.path(path, "plots", "figSup_expressionPerCat.pdf"),
      height=7, width=6 )
  ggplot( plotDf, aes( exonClass2, mean ) ) +
      geom_boxplot(outlier.shape = NA) +
      facet_grid( label ~ exonClass ) + theme_bw() +
      xlab("") + ylab(expression(paste("Normalized mean counts (", log[10], ")"))) +
      ylim(0, 4) +
      theme( axis.text = element_text(size = 14),
          axis.text.x=element_text(angle=90, vjust=.35, hjust=1),
          axis.title=element_text(size=14),
          strip.text = element_text(size = 12))
  dev.off()

#+END_SRC
    

* Fantom Data

#+BEGIN_SRC R
  
  library(DEXSeq)
  library(GenomicRanges)
  library(rtracklayer)
  
  path <- Sys.getenv("gtex")
  load( file.path( path, "objects", "dxdObjects.RData" ) )
  load( file.path( path, "objects", "geneNames.RData" ) )
  
  cageCounts <-
      read.delim(file.path(path, "processedData",
          "hg19.cage_peak_phase1and2combined_counts_ann.osc.txt"),
              header=TRUE, comment.char="#")
  
  cageAnnotation <-
      read.delim(file.path(path, "processedData",
          "fantom_sample_annotation.txt"), sep="\t", header=FALSE, stringsAsFactors=FALSE)
  
  cageAnnotation$V1 <- gsub("\\%|-", ".", cageAnnotation$V1)
  
  cageCounts <- cageCounts[!is.na( cageCounts[,"short_description"] ),]
  cageCounts <- cageCounts[!grepl("p@chr", cageCounts[,"short_description"] ),]
  cageCounts <- cageCounts[gsub( "p\\d*@(.*)", "\\1", as.character( cageCounts[,"short_description"] ) )
                           %in% geneNames,]
  
  coordsHG19 <- strsplit( as.character( cageCounts$X00Annotation ), ":|\\.\\.|," )
  coordsHG19 <- GRanges(
      sapply( coordsHG19, "[[", 1 ),
      IRanges( as.numeric( sapply( coordsHG19, "[[", 2 ) ), as.numeric( sapply( coordsHG19, "[[", 3 ) ) ),
      sapply( coordsHG19, "[[", 4 ) )
  seqlevelsStyle(coordsHG19) = "UCSC"
  ch <- import.chain(file.path( path, "annotation", "hg19ToHg38.over.chain"))
  
  coordsNew <- liftOver(coordsHG19, ch)
  #lengthsNewCoords <- sapply( coordsNew, length )
  cageCounts <- cageCounts[elementNROWS( coordsNew ) == 1,]
  coordsNew <- coordsNew[elementNROWS( coordsNew ) == 1]
  coordsNew <- unlist( coordsNew )
  
  cageIDs <- gsub( "p\\d*@(.*)", "\\1", as.character( cageCounts[,"short_description"] ) )
  cageIDs <- names( geneNames[match( cageIDs, geneNames )] )
  peakIDs <- gsub("(.*)@.*", "\\1", as.character( cageCounts[,"short_description"] ) )
  
  levels( colData(dxd1)$tissue )
  tissues <- c( "caudate", "of cerebellum", "occipital cortex|parietal cortex", "hippocampus", "putamen")
  niceLabels <- c("Caudate", "Cerebellum", "Cortex", "Hippocampus", "Putamen")
  df <- do.call(rbind, lapply( seq_along( tissues ), function(x){
      data.frame(
          columns=cageAnnotation[grepl( tissues[x], cageAnnotation$V2 ),"V1"],
          tissue=niceLabels[x], stringsAsFactors=FALSE )
  }))
  
  fantom1 <- DEXSeqDataSet(
      countData=cageCounts[,df$columns],
      sampleData=df[,"tissue", drop=FALSE],
      design= ~sample + exon + tissue:exon,
      featureID=peakIDs, groupID=cageIDs, featureRanges=coordsNew )
  fantom1 <- estimateSizeFactors( fantom1 )
  
  levels( colData(dxd2)$tissue )
  tissues <- c( "Adipocyte - subcutaneous", "Lung", "Skeletal Muscle Cells",
    "skin normal", "thyroid,", "Whole blood")
  niceLabels <- c( "Adipose - Subcutaneous", "Lung", "Muscle - Skeletal", "Skin", 
                  "Thyroid", "Whole Blood" )
  df <- do.call(rbind, lapply( seq_along( tissues ), function(x){
      data.frame(
          columns=cageAnnotation[grepl( tissues[x], cageAnnotation$V2 ),"V1"],
          tissue=niceLabels[x], stringsAsFactors=FALSE )
  }))
  
  fantom2 <- DEXSeqDataSet(
      countData=cageCounts[,df$columns],
      sampleData=df[,"tissue", drop=FALSE],
      design= ~sample + exon + tissue:exon,
      featureID=peakIDs, groupID=cageIDs, featureRanges=coordsNew )
  fantom2 <- estimateSizeFactors( fantom2 )
  
  levels( colData(dxd3)$tissue )
  
  tissues <- c( "colon", "heart,", "pancreas" )
  niceLabels <- c("Colon", "Heart", "Pancreas")
  df <- do.call(rbind, lapply( seq_along( tissues ), function(x){
      data.frame(
          columns=cageAnnotation[grepl( tissues[x], cageAnnotation$V2 ),"V1"],
          tissue=niceLabels[x], stringsAsFactors=FALSE )
  }))
  
  fantom3 <- DEXSeqDataSet(
      countData=cageCounts[,df$columns],
      sampleData=df[,"tissue", drop=FALSE],
      design= ~sample + exon + tissue:exon,
      featureID=peakIDs, groupID=cageIDs, featureRanges=coordsNew )
  fantom3 <- estimateSizeFactors( fantom3 )
  
  BPPARAM <- SnowParam(10)
  
  fantom1 <- estimateDispersions( fantom1, BPPARAM=BPPARAM )
  fantom1 <- testForDEU( fantom1, BPPARAM=BPPARAM )
  
  fantom2 <- estimateDispersions( fantom2, BPPARAM=BPPARAM )
  fantom2 <- testForDEU( fantom2, BPPARAM=BPPARAM )
  
  fantom3 <- estimateDispersions( fantom3, BPPARAM=BPPARAM )
  fantom3 <- testForDEU( fantom3, BPPARAM=BPPARAM )
  
  resFantom1 <- DEXSeqResults( fantom1 )
  resFantom2 <- DEXSeqResults( fantom2 )
  resFantom3 <- DEXSeqResults( fantom3 )
  
  save( resFantom1, resFantom2, resFantom3, fantom1, fantom2, fantom3,
       file=file.path( path, "objects", "fantomData.RData" ) )
  
#+END_SRC

** Degree of overlaps

#+BEGIN_SRC R

  library(DEXSeq)
  library(MatchIt)
  library(ggplot2)
  path <- Sys.getenv("gtex")
  
  load( file.path( path, "objects", "pvals1.RData" ) )
  load( file.path( path, "objects", "pvals2.RData" ) )
  load( file.path( path, "objects", "pvals3.RData" ) )
  load( file.path( path, "objects", "geneMats.RData") )
  load( file.path( path, "objects", "fantomData.RData") )
  
  getContigencyMatrices <- function( fantom, resFantom, pvalsTissue, mats ){
      affectedGenesTSS <- unique( resFantom$groupID[which(resFantom$padj < 0.1)] )
      affectedGenesDEU <- unique( sapply( strsplit( names( which( pvalsTissue < 0.1 ) ), ":" ), "[[", 1 ))
      a <- sum( affectedGenesDEU %in% affectedGenesTSS )
      b <- sum( mats[["backgroundGenesPC"]] %in% affectedGenesTSS )
      tssMeans <- rowMeans( featureCounts( fantom, normalized=TRUE ) )
      tssMeans <- tapply( tssMeans, groupIDs(fantom), sum )
      mat <-
          rbind(
              c( a, length( affectedGenesDEU ) -a ),
              c( b, length( mats[["backgroundGenesPC"]] ) - b) )
      rownames(mat) <- c("DEU", "background")
      colnames(mat) <- c("DTSS", "noDTSS")
      df <- data.frame(
          significant=as.numeric(names(tssMeans) %in% affectedGenesTSS),
          mean=tssMeans
          )
      tb <- table(groupIDs(fantom))
      stopifnot( rownames(df)==names(tb) )
      df$numbOfTss <- as.numeric(tb)
      mm <- matchit( significant~mean+numbOfTss, df, distance="mahalanobis", method="nearest" )
      tssBackground <- mm$match.matrix[,1]
      a <- sum( affectedGenesTSS %in% affectedGenesDEU )
      b <- sum( tssBackground %in% affectedGenesDEU )
      matTSS <- rbind(
          c( a, length( affectedGenesTSS )-a ),
          c( b, length( tssBackground )-b) )
      rownames(matTSS) <- c("DTSS", "background")
      colnames(matTSS) <- c("DEU", "notDEU")
      list(geneBackground=mat, tssBackground=matTSS)
  }
  
  fantom <- fantom1
  
  table( groupIDs(fantom) )
  
  #length( unique( resFantom1[which( !is.na(resFantom1$pval )),"groupID"] ) )
  #length( unique( groupIDs( fantom1 )) )
  
  #hist( log(tssMeans ))
  contMat1 <- getContigencyMatrices( fantom1, resFantom1, pvalsTissues1, mats1 )
  contMat2 <- getContigencyMatrices( fantom2, resFantom2, pvalsTissues2, mats2 )
  contMat3 <- getContigencyMatrices( fantom3, resFantom3, pvalsTissues3, mats3 )
  
  percenExample <- contMat1[["geneBackground"]]/rowSums( contMat1[["geneBackground"]] )
  
  dfPlot <- data.frame(
      fraction=c( percenExample["DTSS",], percenExample["noDTSS",] ),
      tss=rep( c("Differential TSS", "Not differential TSS"), each=2 ),
      deu=rep( c("DEU", "Background"), 2) )
  
  fisher.test( contMat3[["geneBackground"]] )
  
#+END_SRC


